/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/api/v1/sessions/{session_id}": {
    /**
     * Get Session
     * @description Gets a session
     */
    get: operations["get_session"];
  };
  "/api/v1/utilities/dynamicprompts": {
    /**
     * Parse Dynamicprompts
     * @description Creates a batch process
     */
    post: operations["parse_dynamicprompts"];
  };
  "/api/v1/models/": {
    /**
     * List Models
     * @description Gets a list of models
     */
    get: operations["list_models"];
  };
  "/api/v1/models/{base_model}/{model_type}/{model_name}": {
    /**
     * Delete Model
     * @description Delete Model
     */
    delete: operations["del_model"];
    /**
     * Update Model
     * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
     */
    patch: operations["update_model"];
  };
  "/api/v1/models/import": {
    /**
     * Import Model
     * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
     */
    post: operations["import_model"];
  };
  "/api/v1/models/add": {
    /**
     * Add Model
     * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
     */
    post: operations["add_model"];
  };
  "/api/v1/models/convert/{base_model}/{model_type}/{model_name}": {
    /**
     * Convert Model
     * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
     */
    put: operations["convert_model"];
  };
  "/api/v1/models/search": {
    /** Search For Models */
    get: operations["search_for_models"];
  };
  "/api/v1/models/ckpt_confs": {
    /**
     * List Ckpt Configs
     * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
     */
    get: operations["list_ckpt_configs"];
  };
  "/api/v1/models/sync": {
    /**
     * Sync To Config
     * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
     * in-memory data structures with disk data structures.
     */
    post: operations["sync_to_config"];
  };
  "/api/v1/models/merge/{base_model}": {
    /**
     * Merge Models
     * @description Convert a checkpoint model into a diffusers model
     */
    put: operations["merge_models"];
  };
  "/api/v1/images/upload": {
    /**
     * Upload Image
     * @description Uploads an image
     */
    post: operations["upload_image"];
  };
  "/api/v1/images/i/{image_name}": {
    /**
     * Get Image Dto
     * @description Gets an image's DTO
     */
    get: operations["get_image_dto"];
    /**
     * Delete Image
     * @description Deletes an image
     */
    delete: operations["delete_image"];
    /**
     * Update Image
     * @description Updates an image
     */
    patch: operations["update_image"];
  };
  "/api/v1/images/clear-intermediates": {
    /**
     * Clear Intermediates
     * @description Clears all intermediates
     */
    post: operations["clear_intermediates"];
  };
  "/api/v1/images/i/{image_name}/metadata": {
    /**
     * Get Image Metadata
     * @description Gets an image's metadata
     */
    get: operations["get_image_metadata"];
  };
  "/api/v1/images/i/{image_name}/full": {
    /**
     * Get Image Full
     * @description Gets a full-resolution image file
     */
    get: operations["get_image_full"];
    /**
     * Get Image Full
     * @description Gets a full-resolution image file
     */
    head: operations["get_image_full"];
  };
  "/api/v1/images/i/{image_name}/thumbnail": {
    /**
     * Get Image Thumbnail
     * @description Gets a thumbnail image file
     */
    get: operations["get_image_thumbnail"];
  };
  "/api/v1/images/i/{image_name}/urls": {
    /**
     * Get Image Urls
     * @description Gets an image and thumbnail URL
     */
    get: operations["get_image_urls"];
  };
  "/api/v1/images/": {
    /**
     * List Image Dtos
     * @description Gets a list of image DTOs
     */
    get: operations["list_image_dtos"];
  };
  "/api/v1/images/delete": {
    /** Delete Images From List */
    post: operations["delete_images_from_list"];
  };
  "/api/v1/images/star": {
    /** Star Images In List */
    post: operations["star_images_in_list"];
  };
  "/api/v1/images/unstar": {
    /** Unstar Images In List */
    post: operations["unstar_images_in_list"];
  };
  "/api/v1/images/download": {
    /** Download Images From List */
    post: operations["download_images_from_list"];
  };
  "/api/v1/boards/": {
    /**
     * List Boards
     * @description Gets a list of boards
     */
    get: operations["list_boards"];
    /**
     * Create Board
     * @description Creates a board
     */
    post: operations["create_board"];
  };
  "/api/v1/boards/{board_id}": {
    /**
     * Get Board
     * @description Gets a board
     */
    get: operations["get_board"];
    /**
     * Delete Board
     * @description Deletes a board
     */
    delete: operations["delete_board"];
    /**
     * Update Board
     * @description Updates a board
     */
    patch: operations["update_board"];
  };
  "/api/v1/boards/{board_id}/image_names": {
    /**
     * List All Board Image Names
     * @description Gets a list of images for a board
     */
    get: operations["list_all_board_image_names"];
  };
  "/api/v1/board_images/": {
    /**
     * Add Image To Board
     * @description Creates a board_image
     */
    post: operations["add_image_to_board"];
    /**
     * Remove Image From Board
     * @description Removes an image from its board, if it had one
     */
    delete: operations["remove_image_from_board"];
  };
  "/api/v1/board_images/batch": {
    /**
     * Add Images To Board
     * @description Adds a list of images to a board
     */
    post: operations["add_images_to_board"];
  };
  "/api/v1/board_images/batch/delete": {
    /**
     * Remove Images From Board
     * @description Removes a list of images from their board, if they had one
     */
    post: operations["remove_images_from_board"];
  };
  "/api/v1/app/version": {
    /** Get Version */
    get: operations["app_version"];
  };
  "/api/v1/app/config": {
    /** Get Config */
    get: operations["get_config"];
  };
  "/api/v1/app/logging": {
    /**
     * Get Log Level
     * @description Returns the log level
     */
    get: operations["get_log_level"];
    /**
     * Set Log Level
     * @description Sets the log verbosity level
     */
    post: operations["set_log_level"];
  };
  "/api/v1/app/invocation_cache": {
    /**
     * Clear Invocation Cache
     * @description Clears the invocation cache
     */
    delete: operations["clear_invocation_cache"];
  };
  "/api/v1/app/invocation_cache/enable": {
    /**
     * Enable Invocation Cache
     * @description Clears the invocation cache
     */
    put: operations["enable_invocation_cache"];
  };
  "/api/v1/app/invocation_cache/disable": {
    /**
     * Disable Invocation Cache
     * @description Clears the invocation cache
     */
    put: operations["disable_invocation_cache"];
  };
  "/api/v1/app/invocation_cache/status": {
    /**
     * Get Invocation Cache Status
     * @description Clears the invocation cache
     */
    get: operations["get_invocation_cache_status"];
  };
  "/api/v1/queue/{queue_id}/enqueue_batch": {
    /**
     * Enqueue Batch
     * @description Processes a batch and enqueues the output graphs for execution.
     */
    post: operations["enqueue_batch"];
  };
  "/api/v1/queue/{queue_id}/list": {
    /**
     * List Queue Items
     * @description Gets all queue items (without graphs)
     */
    get: operations["list_queue_items"];
  };
  "/api/v1/queue/{queue_id}/processor/resume": {
    /**
     * Resume
     * @description Resumes session processor
     */
    put: operations["resume"];
  };
  "/api/v1/queue/{queue_id}/processor/pause": {
    /**
     * Pause
     * @description Pauses session processor
     */
    put: operations["pause"];
  };
  "/api/v1/queue/{queue_id}/cancel_by_batch_ids": {
    /**
     * Cancel By Batch Ids
     * @description Immediately cancels all queue items from the given batch ids
     */
    put: operations["cancel_by_batch_ids"];
  };
  "/api/v1/queue/{queue_id}/clear": {
    /**
     * Clear
     * @description Clears the queue entirely, immediately canceling the currently-executing session
     */
    put: operations["clear"];
  };
  "/api/v1/queue/{queue_id}/prune": {
    /**
     * Prune
     * @description Prunes all completed or errored queue items
     */
    put: operations["prune"];
  };
  "/api/v1/queue/{queue_id}/current": {
    /**
     * Get Current Queue Item
     * @description Gets the currently execution queue item
     */
    get: operations["get_current_queue_item"];
  };
  "/api/v1/queue/{queue_id}/next": {
    /**
     * Get Next Queue Item
     * @description Gets the next queue item, without executing it
     */
    get: operations["get_next_queue_item"];
  };
  "/api/v1/queue/{queue_id}/status": {
    /**
     * Get Queue Status
     * @description Gets the status of the session queue
     */
    get: operations["get_queue_status"];
  };
  "/api/v1/queue/{queue_id}/b/{batch_id}/status": {
    /**
     * Get Batch Status
     * @description Gets the status of the session queue
     */
    get: operations["get_batch_status"];
  };
  "/api/v1/queue/{queue_id}/i/{item_id}": {
    /**
     * Get Queue Item
     * @description Gets a queue item
     */
    get: operations["get_queue_item"];
  };
  "/api/v1/queue/{queue_id}/i/{item_id}/cancel": {
    /**
     * Cancel Queue Item
     * @description Deletes a queue item
     */
    put: operations["cancel_queue_item"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** AddImagesToBoardResult */
    AddImagesToBoardResult: {
      /**
       * Board Id
       * @description The id of the board the images were added to
       */
      board_id: string;
      /**
       * Added Image Names
       * @description The image names that were added to the board
       */
      added_image_names: string[];
    };
    /**
     * Add Integers
     * @description Adds two numbers
     */
    AddInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default add
       * @constant
       */
      type: "add";
    };
    /**
     * AppConfig
     * @description App Config Response
     */
    AppConfig: {
      /**
       * Infill Methods
       * @description List of available infill methods
       */
      infill_methods: string[];
      /**
       * Upscaling Methods
       * @description List of upscaling methods
       */
      upscaling_methods: components["schemas"]["Upscaler"][];
      /**
       * Nsfw Methods
       * @description List of NSFW checking methods
       */
      nsfw_methods: string[];
      /**
       * Watermarking Methods
       * @description List of invisible watermark methods
       */
      watermarking_methods: string[];
    };
    /**
     * AppVersion
     * @description App Version Response
     */
    AppVersion: {
      /**
       * Version
       * @description App version
       */
      version: string;
    };
    /**
     * BaseModelType
     * @enum {string}
     */
    BaseModelType: "any" | "sd-1" | "sd-2" | "sdxl" | "sdxl-refiner";
    /** Batch */
    Batch: {
      /**
       * Batch Id
       * @description The ID of the batch
       */
      batch_id?: string;
      /**
       * Data
       * @description The batch data collection.
       */
      data?: components["schemas"]["BatchDatum"][][] | null;
      /** @description The graph to initialize the session with */
      graph: components["schemas"]["Graph"];
      /**
       * Runs
       * @description Int stating how many times to iterate through all possible batch indices
       * @default 1
       */
      runs: number;
    };
    /** BatchDatum */
    BatchDatum: {
      /**
       * Node Path
       * @description The node into which this batch data collection will be substituted.
       */
      node_path: string;
      /**
       * Field Name
       * @description The field into which this batch data collection will be substituted.
       */
      field_name: string;
      /**
       * Items
       * @description The list of items to substitute into the node/field.
       */
      items?: (string | number)[];
    };
    /** BatchStatus */
    BatchStatus: {
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string;
      /**
       * Batch Id
       * @description The ID of the batch
       */
      batch_id: string;
      /**
       * Pending
       * @description Number of queue items with status 'pending'
       */
      pending: number;
      /**
       * In Progress
       * @description Number of queue items with status 'in_progress'
       */
      in_progress: number;
      /**
       * Completed
       * @description Number of queue items with status 'complete'
       */
      completed: number;
      /**
       * Failed
       * @description Number of queue items with status 'error'
       */
      failed: number;
      /**
       * Canceled
       * @description Number of queue items with status 'canceled'
       */
      canceled: number;
      /**
       * Total
       * @description Total number of queue items
       */
      total: number;
    };
    /**
     * Blank Image
     * @description Creates a blank image and forwards it to the pipeline
     */
    BlankImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Width
       * @description The width of the image
       * @default 512
       */
      width?: number;
      /**
       * Height
       * @description The height of the image
       * @default 512
       */
      height?: number;
      /**
       * Mode
       * @description The mode of the image
       * @default RGB
       * @enum {string}
       */
      mode?: "RGB" | "RGBA";
      /**
       * @description The color of the image
       * @default {
       *   "a": 255,
       *   "b": 0,
       *   "g": 0,
       *   "r": 0
       * }
       */
      color?: components["schemas"]["ColorField"];
      /**
       * type
       * @default blank_image
       * @constant
       */
      type: "blank_image";
    };
    /**
     * Blend Latents
     * @description Blend two latents using a given alpha. Latents must have same size.
     */
    BlendLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Latents tensor */
      latents_a?: components["schemas"]["LatentsField"];
      /** @description Latents tensor */
      latents_b?: components["schemas"]["LatentsField"];
      /**
       * Alpha
       * @description Blending factor. 0.0 = use input A only, 1.0 = use input B only, 0.5 = 50% mix of input A and input B.
       * @default 0.5
       */
      alpha?: number;
      /**
       * type
       * @default lblend
       * @constant
       */
      type: "lblend";
    };
    /** BoardChanges */
    BoardChanges: {
      /**
       * Board Name
       * @description The board's new name.
       */
      board_name?: string | null;
      /**
       * Cover Image Name
       * @description The name of the board's new cover image.
       */
      cover_image_name?: string | null;
    };
    /**
     * BoardDTO
     * @description Deserialized board record with cover image URL and image count.
     */
    BoardDTO: {
      /**
       * Board Id
       * @description The unique ID of the board.
       */
      board_id: string;
      /**
       * Board Name
       * @description The name of the board.
       */
      board_name: string;
      /**
       * Created At
       * @description The created timestamp of the board.
       */
      created_at: string;
      /**
       * Updated At
       * @description The updated timestamp of the board.
       */
      updated_at: string;
      /**
       * Deleted At
       * @description The deleted timestamp of the board.
       */
      deleted_at?: string | null;
      /**
       * Cover Image Name
       * @description The name of the board's cover image.
       */
      cover_image_name: string | null;
      /**
       * Image Count
       * @description The number of images in the board.
       */
      image_count: number;
    };
    /**
     * BoardField
     * @description A board primitive field
     */
    BoardField: {
      /**
       * Board Id
       * @description The id of the board
       */
      board_id: string;
    };
    /** Body_add_image_to_board */
    Body_add_image_to_board: {
      /**
       * Board Id
       * @description The id of the board to add to
       */
      board_id: string;
      /**
       * Image Name
       * @description The name of the image to add
       */
      image_name: string;
    };
    /** Body_add_images_to_board */
    Body_add_images_to_board: {
      /**
       * Board Id
       * @description The id of the board to add to
       */
      board_id: string;
      /**
       * Image Names
       * @description The names of the images to add
       */
      image_names: string[];
    };
    /** Body_cancel_by_batch_ids */
    Body_cancel_by_batch_ids: {
      /**
       * Batch Ids
       * @description The list of batch_ids to cancel all queue items for
       */
      batch_ids: string[];
    };
    /** Body_delete_images_from_list */
    Body_delete_images_from_list: {
      /**
       * Image Names
       * @description The list of names of images to delete
       */
      image_names: string[];
    };
    /** Body_download_images_from_list */
    Body_download_images_from_list: {
      /**
       * Image Names
       * @description The list of names of images to download
       */
      image_names: string[];
      /**
       * Board Id
       * @description The board from which image should be downloaded from
       */
      board_id?: string | null;
    };
    /** Body_enqueue_batch */
    Body_enqueue_batch: {
      /** @description Batch to process */
      batch: components["schemas"]["Batch"];
      /**
       * Prepend
       * @description Whether or not to prepend this batch in the queue
       * @default false
       */
      prepend?: boolean;
    };
    /** Body_import_model */
    Body_import_model: {
      /**
       * Location
       * @description A model path, repo_id or URL to import
       */
      location: string;
      /**
       * Prediction Type
       * @description Prediction type for SDv2 checkpoints and rare SDv1 checkpoints
       */
      prediction_type?: ("v_prediction" | "epsilon" | "sample") | null;
    };
    /** Body_merge_models */
    Body_merge_models: {
      /** @description Model configuration */
      body: components["schemas"]["MergeModelsBody"];
    };
    /** Body_parse_dynamicprompts */
    Body_parse_dynamicprompts: {
      /**
       * Prompt
       * @description The prompt to parse with dynamicprompts
       */
      prompt: string;
      /**
       * Max Prompts
       * @description The max number of prompts to generate
       * @default 1000
       */
      max_prompts?: number;
      /**
       * Combinatorial
       * @description Whether to use the combinatorial generator
       * @default true
       */
      combinatorial?: boolean;
    };
    /** Body_remove_image_from_board */
    Body_remove_image_from_board: {
      /**
       * Image Name
       * @description The name of the image to remove
       */
      image_name: string;
    };
    /** Body_remove_images_from_board */
    Body_remove_images_from_board: {
      /**
       * Image Names
       * @description The names of the images to remove
       */
      image_names: string[];
    };
    /** Body_star_images_in_list */
    Body_star_images_in_list: {
      /**
       * Image Names
       * @description The list of names of images to star
       */
      image_names: string[];
    };
    /** Body_unstar_images_in_list */
    Body_unstar_images_in_list: {
      /**
       * Image Names
       * @description The list of names of images to unstar
       */
      image_names: string[];
    };
    /** Body_upload_image */
    Body_upload_image: {
      /**
       * File
       * Format: binary
       */
      file: Blob;
    };
    /**
     * Boolean Collection Primitive
     * @description A collection of boolean primitive values
     */
    BooleanCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of boolean values
       */
      collection?: boolean[];
      /**
       * type
       * @default boolean_collection
       * @constant
       */
      type: "boolean_collection";
    };
    /**
     * BooleanCollectionOutput
     * @description Base class for nodes that output a collection of booleans
     */
    BooleanCollectionOutput: {
      /**
       * Collection
       * @description The output boolean collection
       */
      collection: boolean[];
      /**
       * type
       * @default boolean_collection_output
       * @constant
       */
      type: "boolean_collection_output";
    };
    /**
     * Boolean Primitive
     * @description A boolean primitive value
     */
    BooleanInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The boolean value
       * @default false
       */
      value?: boolean;
      /**
       * type
       * @default boolean
       * @constant
       */
      type: "boolean";
    };
    /**
     * BooleanOutput
     * @description Base class for nodes that output a single boolean
     */
    BooleanOutput: {
      /**
       * Value
       * @description The output boolean
       */
      value: boolean;
      /**
       * type
       * @default boolean_output
       * @constant
       */
      type: "boolean_output";
    };
    /** CLIPVisionModelDiffusersConfig */
    CLIPVisionModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default clip_vision
       * @constant
       */
      model_type: "clip_vision";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
    };
    /** CLIPVisionModelField */
    CLIPVisionModelField: {
      /**
       * Model Name
       * @description Name of the CLIP Vision image encoder model
       */
      model_name: string;
      /** @description Base model (usually 'Any') */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * CV2 Infill
     * @description Infills transparent areas of an image using OpenCV Inpainting
     */
    CV2InfillInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to infill */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default infill_cv2
       * @constant
       */
      type: "infill_cv2";
    };
    /**
     * CancelByBatchIDsResult
     * @description Result of canceling by list of batch ids
     */
    CancelByBatchIDsResult: {
      /**
       * Canceled
       * @description Number of queue items canceled
       */
      canceled: number;
    };
    /**
     * Canny Processor
     * @description Canny edge detection for ControlNet
     */
    CannyImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Low Threshold
       * @description The low threshold of the Canny pixel gradient (0-255)
       * @default 100
       */
      low_threshold?: number;
      /**
       * High Threshold
       * @description The high threshold of the Canny pixel gradient (0-255)
       * @default 200
       */
      high_threshold?: number;
      /**
       * type
       * @default canny_image_processor
       * @constant
       */
      type: "canny_image_processor";
    };
    /**
     * ClearResult
     * @description Result of clearing the session queue
     */
    ClearResult: {
      /**
       * Deleted
       * @description Number of queue items deleted
       */
      deleted: number;
    };
    /** ClipField */
    ClipField: {
      /** @description Info to load tokenizer submodel */
      tokenizer: components["schemas"]["ModelInfo"];
      /** @description Info to load text_encoder submodel */
      text_encoder: components["schemas"]["ModelInfo"];
      /**
       * Skipped Layers
       * @description Number of skipped layers in text_encoder
       */
      skipped_layers: number;
      /**
       * Loras
       * @description Loras to apply on model loading
       */
      loras: components["schemas"]["LoraInfo"][];
    };
    /**
     * CLIP Skip
     * @description Skip layers in clip text_encoder model.
     */
    ClipSkipInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Skipped Layers
       * @description Number of layers to skip in text encoder
       * @default 0
       */
      skipped_layers?: number;
      /**
       * type
       * @default clip_skip
       * @constant
       */
      type: "clip_skip";
    };
    /**
     * ClipSkipInvocationOutput
     * @description Clip skip node output
     */
    ClipSkipInvocationOutput: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"] | null;
      /**
       * type
       * @default clip_skip_output
       * @constant
       */
      type: "clip_skip_output";
    };
    /**
     * CollectInvocation
     * @description Collects values into a collection
     */
    CollectInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection Item
       * @description The item to collect (all inputs must be of the same type)
       */
      item?: unknown;
      /**
       * Collection
       * @description The collection, will be provided on execution
       */
      collection?: unknown[];
      /**
       * type
       * @default collect
       * @constant
       */
      type: "collect";
    };
    /** CollectInvocationOutput */
    CollectInvocationOutput: {
      /**
       * Collection
       * @description The collection of input items
       */
      collection: unknown[];
      /**
       * type
       * @default collect_output
       * @constant
       */
      type: "collect_output";
    };
    /**
     * ColorCollectionOutput
     * @description Base class for nodes that output a collection of colors
     */
    ColorCollectionOutput: {
      /**
       * Collection
       * @description The output colors
       */
      collection: components["schemas"]["ColorField"][];
      /**
       * type
       * @default color_collection_output
       * @constant
       */
      type: "color_collection_output";
    };
    /**
     * Color Correct
     * @description Shifts the colors of a target image to match the reference image, optionally
     * using a mask to only color-correct certain regions of the target image.
     */
    ColorCorrectInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to color-correct */
      image?: components["schemas"]["ImageField"];
      /** @description Reference image for color-correction */
      reference?: components["schemas"]["ImageField"];
      /** @description Mask to use when applying color-correction */
      mask?: components["schemas"]["ImageField"] | null;
      /**
       * Mask Blur Radius
       * @description Mask blur radius
       * @default 8
       */
      mask_blur_radius?: number;
      /**
       * type
       * @default color_correct
       * @constant
       */
      type: "color_correct";
    };
    /**
     * ColorField
     * @description A color primitive field
     */
    ColorField: {
      /**
       * R
       * @description The red component
       */
      r: number;
      /**
       * G
       * @description The green component
       */
      g: number;
      /**
       * B
       * @description The blue component
       */
      b: number;
      /**
       * A
       * @description The alpha component
       */
      a: number;
    };
    /**
     * Color Primitive
     * @description A color primitive value
     */
    ColorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * @description The color value
       * @default {
       *   "a": 255,
       *   "b": 0,
       *   "g": 0,
       *   "r": 0
       * }
       */
      color?: components["schemas"]["ColorField"];
      /**
       * type
       * @default color
       * @constant
       */
      type: "color";
    };
    /**
     * Color Map Processor
     * @description Generates a color map from the provided image
     */
    ColorMapImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Color Map Tile Size
       * @description Tile size
       * @default 64
       */
      color_map_tile_size?: number;
      /**
       * type
       * @default color_map_image_processor
       * @constant
       */
      type: "color_map_image_processor";
    };
    /**
     * ColorOutput
     * @description Base class for nodes that output a single color
     */
    ColorOutput: {
      /** @description The output color */
      color: components["schemas"]["ColorField"];
      /**
       * type
       * @default color_output
       * @constant
       */
      type: "color_output";
    };
    /**
     * Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    CompelInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Prompt
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      prompt?: string;
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * type
       * @default compel
       * @constant
       */
      type: "compel";
    };
    /**
     * Conditioning Collection Primitive
     * @description A collection of conditioning tensor primitive values
     */
    ConditioningCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of conditioning tensors
       */
      collection?: components["schemas"]["ConditioningField"][];
      /**
       * type
       * @default conditioning_collection
       * @constant
       */
      type: "conditioning_collection";
    };
    /**
     * ConditioningCollectionOutput
     * @description Base class for nodes that output a collection of conditioning tensors
     */
    ConditioningCollectionOutput: {
      /**
       * Collection
       * @description The output conditioning tensors
       */
      collection: components["schemas"]["ConditioningField"][];
      /**
       * type
       * @default conditioning_collection_output
       * @constant
       */
      type: "conditioning_collection_output";
    };
    /**
     * ConditioningField
     * @description A conditioning tensor primitive value
     */
    ConditioningField: {
      /**
       * Conditioning Name
       * @description The name of conditioning tensor
       */
      conditioning_name: string;
    };
    /**
     * Conditioning Primitive
     * @description A conditioning tensor primitive value
     */
    ConditioningInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Conditioning tensor */
      conditioning?: components["schemas"]["ConditioningField"];
      /**
       * type
       * @default conditioning
       * @constant
       */
      type: "conditioning";
    };
    /**
     * ConditioningOutput
     * @description Base class for nodes that output a single conditioning tensor
     */
    ConditioningOutput: {
      /** @description Conditioning tensor */
      conditioning: components["schemas"]["ConditioningField"];
      /**
       * type
       * @default conditioning_output
       * @constant
       */
      type: "conditioning_output";
    };
    /**
     * Content Shuffle Processor
     * @description Applies content shuffle processing to image
     */
    ContentShuffleImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * H
       * @description Content shuffle `h` parameter
       * @default 512
       */
      h?: number;
      /**
       * W
       * @description Content shuffle `w` parameter
       * @default 512
       */
      w?: number;
      /**
       * F
       * @description Content shuffle `f` parameter
       * @default 256
       */
      f?: number;
      /**
       * type
       * @default content_shuffle_image_processor
       * @constant
       */
      type: "content_shuffle_image_processor";
    };
    /** ControlField */
    ControlField: {
      /** @description The control image */
      image: components["schemas"]["ImageField"];
      /** @description The ControlNet model to use */
      control_model: components["schemas"]["ControlNetModelField"];
      /**
       * Control Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      control_weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the ControlNet is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the ControlNet is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Control Mode
       * @description The control mode to use
       * @default balanced
       * @enum {string}
       */
      control_mode?: "balanced" | "more_prompt" | "more_control" | "unbalanced";
      /**
       * Resize Mode
       * @description The resize mode to use
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "just_resize" | "crop_resize" | "fill_resize" | "just_resize_simple";
    };
    /**
     * ControlNet
     * @description Collects ControlNet info to pass to other nodes
     */
    ControlNetInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The control image */
      image?: components["schemas"]["ImageField"];
      /** @description ControlNet model to load */
      control_model: components["schemas"]["ControlNetModelField"];
      /**
       * Control Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      control_weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the ControlNet is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the ControlNet is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Control Mode
       * @description The control mode used
       * @default balanced
       * @enum {string}
       */
      control_mode?: "balanced" | "more_prompt" | "more_control" | "unbalanced";
      /**
       * Resize Mode
       * @description The resize mode used
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "just_resize" | "crop_resize" | "fill_resize" | "just_resize_simple";
      /**
       * type
       * @default controlnet
       * @constant
       */
      type: "controlnet";
    };
    /** ControlNetModelCheckpointConfig */
    ControlNetModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default controlnet
       * @constant
       */
      model_type: "controlnet";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"] | null;
      /** Config */
      config: string;
    };
    /** ControlNetModelDiffusersConfig */
    ControlNetModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default controlnet
       * @constant
       */
      model_type: "controlnet";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
    };
    /**
     * ControlNetModelField
     * @description ControlNet model field
     */
    ControlNetModelField: {
      /**
       * Model Name
       * @description Name of the ControlNet model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * ControlOutput
     * @description node output for ControlNet info
     */
    ControlOutput: {
      /** @description ControlNet(s) to apply */
      control: components["schemas"]["ControlField"];
      /**
       * type
       * @default control_output
       * @constant
       */
      type: "control_output";
    };
    /**
     * CoreMetadata
     * @description Core generation metadata for an image generated in InvokeAI.
     */
    CoreMetadata: {
      /**
       * App Version
       * @description The version of InvokeAI used to generate this image
       * @default 3.3.0
       */
      app_version?: string;
      /**
       * Generation Mode
       * @description The generation mode that output this image
       */
      generation_mode?: string | null;
      /**
       * Created By
       * @description The name of the creator of the image
       */
      created_by?: string | null;
      /**
       * Positive Prompt
       * @description The positive prompt parameter
       */
      positive_prompt?: string | null;
      /**
       * Negative Prompt
       * @description The negative prompt parameter
       */
      negative_prompt?: string | null;
      /**
       * Width
       * @description The width parameter
       */
      width?: number | null;
      /**
       * Height
       * @description The height parameter
       */
      height?: number | null;
      /**
       * Seed
       * @description The seed used for noise generation
       */
      seed?: number | null;
      /**
       * Rand Device
       * @description The device used for random number generation
       */
      rand_device?: string | null;
      /**
       * Cfg Scale
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale?: number | null;
      /**
       * Steps
       * @description The number of steps used for inference
       */
      steps?: number | null;
      /**
       * Scheduler
       * @description The scheduler used for inference
       */
      scheduler?: string | null;
      /**
       * Clip Skip
       * @description The number of skipped CLIP layers
       */
      clip_skip?: number | null;
      /** @description The main model used for inference */
      model?: components["schemas"]["MainModelField"] | null;
      /**
       * Controlnets
       * @description The ControlNets used for inference
       */
      controlnets?: components["schemas"]["ControlField"][] | null;
      /**
       * Ipadapters
       * @description The IP Adapters used for inference
       */
      ipAdapters?: components["schemas"]["IPAdapterMetadataField"][] | null;
      /**
       * T2Iadapters
       * @description The IP Adapters used for inference
       */
      t2iAdapters?: components["schemas"]["T2IAdapterField"][] | null;
      /**
       * Loras
       * @description The LoRAs used for inference
       */
      loras?: components["schemas"]["LoRAMetadataField"][] | null;
      /** @description The VAE used for decoding, if the main model's default was not used */
      vae?: components["schemas"]["VAEModelField"] | null;
      /**
       * Strength
       * @description The strength used for latents-to-latents
       */
      strength?: number | null;
      /**
       * Init Image
       * @description The name of the initial image
       */
      init_image?: string | null;
      /**
       * Positive Style Prompt
       * @description The positive style prompt parameter
       */
      positive_style_prompt?: string | null;
      /**
       * Negative Style Prompt
       * @description The negative style prompt parameter
       */
      negative_style_prompt?: string | null;
      /** @description The SDXL Refiner model used */
      refiner_model?: components["schemas"]["MainModelField"] | null;
      /**
       * Refiner Cfg Scale
       * @description The classifier-free guidance scale parameter used for the refiner
       */
      refiner_cfg_scale?: number | null;
      /**
       * Refiner Steps
       * @description The number of steps used for the refiner
       */
      refiner_steps?: number | null;
      /**
       * Refiner Scheduler
       * @description The scheduler used for the refiner
       */
      refiner_scheduler?: string | null;
      /**
       * Refiner Positive Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_positive_aesthetic_score?: number | null;
      /**
       * Refiner Negative Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_negative_aesthetic_score?: number | null;
      /**
       * Refiner Start
       * @description The start value used for refiner denoising
       */
      refiner_start?: number | null;
    };
    /**
     * Create Denoise Mask
     * @description Creates mask for denoising model run.
     */
    CreateDenoiseMaskInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description VAE */
      vae?: components["schemas"]["VaeField"];
      /** @description Image which will be masked */
      image?: components["schemas"]["ImageField"] | null;
      /** @description The mask to use when pasting */
      mask?: components["schemas"]["ImageField"];
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean;
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean;
      /**
       * type
       * @default create_denoise_mask
       * @constant
       */
      type: "create_denoise_mask";
    };
    /** CursorPaginatedResults[SessionQueueItemDTO] */
    CursorPaginatedResults_SessionQueueItemDTO_: {
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number;
      /**
       * Has More
       * @description Whether there are more items available
       */
      has_more: boolean;
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["SessionQueueItemDTO"][];
    };
    /**
     * OpenCV Inpaint
     * @description Simple inpaint using opencv.
     */
    CvInpaintInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to inpaint */
      image?: components["schemas"]["ImageField"];
      /** @description The mask to use when inpainting */
      mask?: components["schemas"]["ImageField"];
      /**
       * type
       * @default cv_inpaint
       * @constant
       */
      type: "cv_inpaint";
    };
    /** DeleteBoardResult */
    DeleteBoardResult: {
      /**
       * Board Id
       * @description The id of the board that was deleted.
       */
      board_id: string;
      /**
       * Deleted Board Images
       * @description The image names of the board-images relationships that were deleted.
       */
      deleted_board_images: string[];
      /**
       * Deleted Images
       * @description The names of the images that were deleted.
       */
      deleted_images: string[];
    };
    /** DeleteImagesFromListResult */
    DeleteImagesFromListResult: {
      /** Deleted Images */
      deleted_images: string[];
    };
    /**
     * Denoise Latents
     * @description Denoises noisy latents to decodable images
     */
    DenoiseLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Positive conditioning tensor */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /** @description Negative conditioning tensor */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /** @description Noise tensor */
      noise?: components["schemas"]["LatentsField"] | null;
      /**
       * Steps
       * @description Number of steps to run
       * @default 10
       */
      steps?: number;
      /**
       * CFG Scale
       * @description Classifier-Free Guidance scale
       * @default 7.5
       */
      cfg_scale?: number | number[];
      /**
       * Denoising Start
       * @description When to start denoising, expressed a percentage of total steps
       * @default 0
       */
      denoising_start?: number;
      /**
       * Denoising End
       * @description When to stop denoising, expressed a percentage of total steps
       * @default 1
       */
      denoising_end?: number;
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"];
      /** Control */
      control?: components["schemas"]["ControlField"] | components["schemas"]["ControlField"][] | null;
      /**
       * IP-Adapter
       * @description IP-Adapter to apply
       */
      ip_adapter?: components["schemas"]["IPAdapterField"] | components["schemas"]["IPAdapterField"][] | null;
      /**
       * T2I-Adapter
       * @description T2I-Adapter(s) to apply
       */
      t2i_adapter?: components["schemas"]["T2IAdapterField"] | components["schemas"]["T2IAdapterField"][] | null;
      /** @description Latents tensor */
      latents?: components["schemas"]["LatentsField"] | null;
      /** @description The mask to use for the operation */
      denoise_mask?: components["schemas"]["DenoiseMaskField"] | null;
      /**
       * type
       * @default denoise_latents
       * @constant
       */
      type: "denoise_latents";
    };
    /**
     * DenoiseMaskField
     * @description An inpaint mask field
     */
    DenoiseMaskField: {
      /**
       * Mask Name
       * @description The name of the mask image
       */
      mask_name: string;
      /**
       * Masked Latents Name
       * @description The name of the masked image latents
       */
      masked_latents_name: string | null;
    };
    /**
     * DenoiseMaskOutput
     * @description Base class for nodes that output a single image
     */
    DenoiseMaskOutput: {
      /** @description Mask for denoise model run */
      denoise_mask: components["schemas"]["DenoiseMaskField"];
      /**
       * type
       * @default denoise_mask_output
       * @constant
       */
      type: "denoise_mask_output";
    };
    /**
     * Divide Integers
     * @description Divides two numbers
     */
    DivideInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default div
       * @constant
       */
      type: "div";
    };
    /**
     * Dynamic Prompt
     * @description Parses a prompt using adieyal/dynamicprompts' random or combinatorial generator
     */
    DynamicPromptInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean | null;
      /**
       * Prompt
       * @description The prompt to parse with dynamicprompts
       */
      prompt?: string;
      /**
       * Max Prompts
       * @description The number of prompts to generate
       * @default 1
       */
      max_prompts?: number;
      /**
       * Combinatorial
       * @description Whether to use the combinatorial generator
       * @default false
       */
      combinatorial?: boolean;
      /**
       * type
       * @default dynamic_prompt
       * @constant
       */
      type: "dynamic_prompt";
    };
    /** DynamicPromptsResponse */
    DynamicPromptsResponse: {
      /** Prompts */
      prompts: string[];
      /** Error */
      error?: string | null;
    };
    /**
     * Upscale (RealESRGAN)
     * @description Upscales an image using RealESRGAN.
     */
    ESRGANInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The input image */
      image?: components["schemas"]["ImageField"];
      /**
       * Model Name
       * @description The Real-ESRGAN model to use
       * @default RealESRGAN_x4plus.pth
       * @enum {string}
       */
      model_name?: "RealESRGAN_x4plus.pth" | "RealESRGAN_x4plus_anime_6B.pth" | "ESRGAN_SRx4_DF2KOST_official-ff704c30.pth" | "RealESRGAN_x2plus.pth";
      /**
       * Tile Size
       * @description Tile size for tiled ESRGAN upscaling (0=tiling disabled)
       * @default 400
       */
      tile_size?: number;
      /**
       * type
       * @default esrgan
       * @constant
       */
      type: "esrgan";
    };
    /** Edge */
    Edge: {
      /** @description The connection for the edge's from node and field */
      source: components["schemas"]["EdgeConnection"];
      /** @description The connection for the edge's to node and field */
      destination: components["schemas"]["EdgeConnection"];
    };
    /** EdgeConnection */
    EdgeConnection: {
      /**
       * Node Id
       * @description The id of the node for this edge connection
       */
      node_id: string;
      /**
       * Field
       * @description The field for this connection
       */
      field: string;
    };
    /** EnqueueBatchResult */
    EnqueueBatchResult: {
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string;
      /**
       * Enqueued
       * @description The total number of queue items enqueued
       */
      enqueued: number;
      /**
       * Requested
       * @description The total number of queue items requested to be enqueued
       */
      requested: number;
      /** @description The batch that was enqueued */
      batch: components["schemas"]["Batch"];
      /**
       * Priority
       * @description The priority of the enqueued batch
       */
      priority: number;
    };
    /**
     * FaceIdentifier
     * @description Outputs an image with detected face IDs printed on each face. For use with other FaceTools.
     */
    FaceIdentifierInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Image to face detect */
      image?: components["schemas"]["ImageField"];
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number;
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean;
      /**
       * type
       * @default face_identifier
       * @constant
       */
      type: "face_identifier";
    };
    /**
     * FaceMask
     * @description Face mask creation using mediapipe face detection
     */
    FaceMaskInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Image to face detect */
      image?: components["schemas"]["ImageField"];
      /**
       * Face Ids
       * @description Comma-separated list of face ids to mask eg '0,2,7'. Numbered from 0. Leave empty to mask all. Find face IDs with FaceIdentifier node.
       * @default
       */
      face_ids?: string;
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number;
      /**
       * X Offset
       * @description Offset for the X-axis of the face mask
       * @default 0
       */
      x_offset?: number;
      /**
       * Y Offset
       * @description Offset for the Y-axis of the face mask
       * @default 0
       */
      y_offset?: number;
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean;
      /**
       * Invert Mask
       * @description Toggle to invert the mask
       * @default false
       */
      invert_mask?: boolean;
      /**
       * type
       * @default face_mask_detection
       * @constant
       */
      type: "face_mask_detection";
    };
    /**
     * FaceMaskOutput
     * @description Base class for FaceMask output
     */
    FaceMaskOutput: {
      /** @description The output image */
      image: components["schemas"]["ImageField"];
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number;
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number;
      /**
       * type
       * @default face_mask_output
       * @constant
       */
      type: "face_mask_output";
      /** @description The output mask */
      mask: components["schemas"]["ImageField"];
    };
    /**
     * FaceOff
     * @description Bound, extract, and mask a face from an image using MediaPipe detection
     */
    FaceOffInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Image for face detection */
      image?: components["schemas"]["ImageField"];
      /**
       * Face Id
       * @description The face ID to process, numbered from 0. Multiple faces not supported. Find a face's ID with FaceIdentifier node.
       * @default 0
       */
      face_id?: number;
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number;
      /**
       * X Offset
       * @description X-axis offset of the mask
       * @default 0
       */
      x_offset?: number;
      /**
       * Y Offset
       * @description Y-axis offset of the mask
       * @default 0
       */
      y_offset?: number;
      /**
       * Padding
       * @description All-axis padding around the mask in pixels
       * @default 0
       */
      padding?: number;
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean;
      /**
       * type
       * @default face_off
       * @constant
       */
      type: "face_off";
    };
    /**
     * FaceOffOutput
     * @description Base class for FaceOff Output
     */
    FaceOffOutput: {
      /** @description The output image */
      image: components["schemas"]["ImageField"];
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number;
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number;
      /**
       * type
       * @default face_off_output
       * @constant
       */
      type: "face_off_output";
      /** @description The output mask */
      mask: components["schemas"]["ImageField"];
      /**
       * X
       * @description The x coordinate of the bounding box's left side
       */
      x: number;
      /**
       * Y
       * @description The y coordinate of the bounding box's top side
       */
      y: number;
    };
    /**
     * Float Collection Primitive
     * @description A collection of float primitive values
     */
    FloatCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of float values
       */
      collection?: number[];
      /**
       * type
       * @default float_collection
       * @constant
       */
      type: "float_collection";
    };
    /**
     * FloatCollectionOutput
     * @description Base class for nodes that output a collection of floats
     */
    FloatCollectionOutput: {
      /**
       * Collection
       * @description The float collection
       */
      collection: number[];
      /**
       * type
       * @default float_collection_output
       * @constant
       */
      type: "float_collection_output";
    };
    /**
     * Float Primitive
     * @description A float primitive value
     */
    FloatInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The float value
       * @default 0
       */
      value?: number;
      /**
       * type
       * @default float
       * @constant
       */
      type: "float";
    };
    /**
     * Float Range
     * @description Creates a range
     */
    FloatLinearRangeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Start
       * @description The first value of the range
       * @default 5
       */
      start?: number;
      /**
       * Stop
       * @description The last value of the range
       * @default 10
       */
      stop?: number;
      /**
       * Steps
       * @description number of values to interpolate over (including start and stop)
       * @default 30
       */
      steps?: number;
      /**
       * type
       * @default float_range
       * @constant
       */
      type: "float_range";
    };
    /**
     * Float Math
     * @description Performs floating point math.
     */
    FloatMathInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Operation
       * @description The operation to perform
       * @default ADD
       * @enum {string}
       */
      operation?: "ADD" | "SUB" | "MUL" | "DIV" | "EXP" | "ABS" | "SQRT" | "MIN" | "MAX";
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default float_math
       * @constant
       */
      type: "float_math";
    };
    /**
     * FloatOutput
     * @description Base class for nodes that output a single float
     */
    FloatOutput: {
      /**
       * Value
       * @description The output float
       */
      value: number;
      /**
       * type
       * @default float_output
       * @constant
       */
      type: "float_output";
    };
    /**
     * Float To Integer
     * @description Rounds a float number to (a multiple of) an integer.
     */
    FloatToIntegerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The value to round
       * @default 0
       */
      value?: number;
      /**
       * Multiple of
       * @description The multiple to round to
       * @default 1
       */
      multiple?: number;
      /**
       * Method
       * @description The method to use for rounding
       * @default Nearest
       * @enum {string}
       */
      method?: "Nearest" | "Floor" | "Ceiling" | "Truncate";
      /**
       * type
       * @default float_to_int
       * @constant
       */
      type: "float_to_int";
    };
    /** Graph */
    Graph: {
      /**
       * Id
       * @description The id of this graph
       */
      id?: string;
      /**
       * Nodes
       * @description The nodes in this graph
       */
      nodes?: {
        [key: string]: components["schemas"]["IntegerInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["FloatCollectionInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["StringCollectionInvocation"] | components["schemas"]["ImageWatermarkInvocation"] | components["schemas"]["ImageChannelMultiplyInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["IntegerCollectionInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"] | components["schemas"]["StringSplitNegInvocation"] | components["schemas"]["FaceIdentifierInvocation"] | components["schemas"]["BlendLatentsInvocation"] | components["schemas"]["ImageInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["BlankImageInvocation"] | components["schemas"]["SDXLLoraLoaderInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["ColorMapImageProcessorInvocation"] | components["schemas"]["FloatMathInvocation"] | components["schemas"]["MaskEdgeInvocation"] | components["schemas"]["RoundInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["CreateDenoiseMaskInvocation"] | components["schemas"]["ImageHueAdjustmentInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["OnnxModelLoaderInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ImageNSFWBlurInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["IPAdapterInvocation"] | components["schemas"]["ConditioningCollectionInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["ONNXTextToLatentsInvocation"] | components["schemas"]["CV2InfillInvocation"] | components["schemas"]["StringInvocation"] | components["schemas"]["FaceMaskInvocation"] | components["schemas"]["SchedulerInvocation"] | components["schemas"]["ONNXLatentsToImageInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["FloatInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["FaceOffInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["ColorInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["LatentsInvocation"] | components["schemas"]["ONNXPromptInvocation"] | components["schemas"]["DenoiseLatentsInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["StringJoinThreeInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ColorCorrectInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["IntegerMathInvocation"] | components["schemas"]["SaveImageInvocation"] | components["schemas"]["LaMaInfillInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["StringReplaceInvocation"] | components["schemas"]["BooleanCollectionInvocation"] | components["schemas"]["StringSplitInvocation"] | components["schemas"]["FloatToIntegerInvocation"] | components["schemas"]["StringJoinInvocation"] | components["schemas"]["T2IAdapterInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["MaskCombineInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["LatentsCollectionInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["ImageChannelOffsetInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["SeamlessModeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["RandomFloatInvocation"] | components["schemas"]["BooleanInvocation"] | components["schemas"]["ConditioningInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["InfillColorInvocation"];
      };
      /**
       * Edges
       * @description The connections between nodes and their fields in this graph
       */
      edges?: components["schemas"]["Edge"][];
    };
    /**
     * GraphExecutionState
     * @description Tracks the state of a graph execution
     */
    GraphExecutionState: {
      /**
       * Id
       * @description The id of the execution state
       */
      id: string;
      /** @description The graph being executed */
      graph: components["schemas"]["Graph"];
      /** @description The expanded graph of activated and executed nodes */
      execution_graph: components["schemas"]["Graph"];
      /**
       * Executed
       * @description The set of node ids that have been executed
       */
      executed: string[];
      /**
       * Executed History
       * @description The list of node ids that have been executed, in order of execution
       */
      executed_history: string[];
      /**
       * Results
       * @description The results of node executions
       */
      results: {
        [key: string]: components["schemas"]["String2Output"] | components["schemas"]["FaceOffOutput"] | components["schemas"]["IntegerCollectionOutput"] | components["schemas"]["SDXLRefinerModelLoaderOutput"] | components["schemas"]["FaceMaskOutput"] | components["schemas"]["SDXLModelLoaderOutput"] | components["schemas"]["StringCollectionOutput"] | components["schemas"]["ConditioningCollectionOutput"] | components["schemas"]["SDXLLoraLoaderOutput"] | components["schemas"]["ONNXModelLoaderOutput"] | components["schemas"]["ControlOutput"] | components["schemas"]["CollectInvocationOutput"] | components["schemas"]["SeamlessModeOutput"] | components["schemas"]["LatentsCollectionOutput"] | components["schemas"]["ImageCollectionOutput"] | components["schemas"]["ClipSkipInvocationOutput"] | components["schemas"]["LatentsOutput"] | components["schemas"]["BooleanOutput"] | components["schemas"]["ModelLoaderOutput"] | components["schemas"]["ConditioningOutput"] | components["schemas"]["IntegerOutput"] | components["schemas"]["StringOutput"] | components["schemas"]["MetadataAccumulatorOutput"] | components["schemas"]["FloatOutput"] | components["schemas"]["FloatCollectionOutput"] | components["schemas"]["SchedulerOutput"] | components["schemas"]["ImageOutput"] | components["schemas"]["ColorOutput"] | components["schemas"]["LoraLoaderOutput"] | components["schemas"]["NoiseOutput"] | components["schemas"]["GraphInvocationOutput"] | components["schemas"]["ColorCollectionOutput"] | components["schemas"]["IPAdapterOutput"] | components["schemas"]["VaeLoaderOutput"] | components["schemas"]["BooleanCollectionOutput"] | components["schemas"]["T2IAdapterOutput"] | components["schemas"]["IterateInvocationOutput"] | components["schemas"]["DenoiseMaskOutput"] | components["schemas"]["StringPosNegOutput"];
      };
      /**
       * Errors
       * @description Errors raised when executing nodes
       */
      errors: {
        [key: string]: string;
      };
      /**
       * Prepared Source Mapping
       * @description The map of prepared nodes to original graph nodes
       */
      prepared_source_mapping: {
        [key: string]: string;
      };
      /**
       * Source Prepared Mapping
       * @description The map of original graph nodes to prepared nodes
       */
      source_prepared_mapping: {
        [key: string]: string[];
      };
    };
    /**
     * GraphInvocation
     * @description Execute a graph
     */
    GraphInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The graph to run */
      graph?: components["schemas"]["Graph"];
      /**
       * type
       * @default graph
       * @constant
       */
      type: "graph";
    };
    /** GraphInvocationOutput */
    GraphInvocationOutput: {
      /**
       * type
       * @default graph_output
       * @constant
       */
      type: "graph_output";
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * HED (softedge) Processor
     * @description Applies HED edge detection to image
     */
    HedImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * Scribble
       * @description Whether or not to use scribble mode
       * @default false
       */
      scribble?: boolean;
      /**
       * type
       * @default hed_image_processor
       * @constant
       */
      type: "hed_image_processor";
    };
    /** IPAdapterField */
    IPAdapterField: {
      /** @description The IP-Adapter image prompt. */
      image: components["schemas"]["ImageField"];
      /** @description The IP-Adapter model to use. */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"];
      /** @description The name of the CLIP image encoder model. */
      image_encoder_model: components["schemas"]["CLIPVisionModelField"];
      /**
       * Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
    };
    /**
     * IP-Adapter
     * @description Collects IP-Adapter info to pass to other nodes.
     */
    IPAdapterInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The IP-Adapter image prompt. */
      image?: components["schemas"]["ImageField"];
      /**
       * IP-Adapter Model
       * @description The IP-Adapter model.
       */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"];
      /**
       * Weight
       * @description The weight given to the IP-Adapter
       * @default 1
       */
      weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
      /**
       * type
       * @default ip_adapter
       * @constant
       */
      type: "ip_adapter";
    };
    /** IPAdapterMetadataField */
    IPAdapterMetadataField: {
      /** @description The IP-Adapter image prompt. */
      image: components["schemas"]["ImageField"];
      /** @description The IP-Adapter model to use. */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"];
      /**
       * Weight
       * @description The weight of the IP-Adapter model
       */
      weight: number;
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
    };
    /** IPAdapterModelField */
    IPAdapterModelField: {
      /**
       * Model Name
       * @description Name of the IP-Adapter model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /** IPAdapterModelInvokeAIConfig */
    IPAdapterModelInvokeAIConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default ip_adapter
       * @constant
       */
      model_type: "ip_adapter";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "invokeai";
      error?: components["schemas"]["ModelError"] | null;
    };
    /** IPAdapterOutput */
    IPAdapterOutput: {
      /**
       * IP-Adapter
       * @description IP-Adapter to apply
       */
      ip_adapter: components["schemas"]["IPAdapterField"];
      /**
       * type
       * @default ip_adapter_output
       * @constant
       */
      type: "ip_adapter_output";
    };
    /**
     * Blur Image
     * @description Blurs an image
     */
    ImageBlurInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to blur */
      image?: components["schemas"]["ImageField"];
      /**
       * Radius
       * @description The blur radius
       * @default 8
       */
      radius?: number;
      /**
       * Blur Type
       * @description The type of blur
       * @default gaussian
       * @enum {string}
       */
      blur_type?: "gaussian" | "box";
      /**
       * type
       * @default img_blur
       * @constant
       */
      type: "img_blur";
    };
    /**
     * ImageCategory
     * @description The category of an image.
     *
     * - GENERAL: The image is an output, init image, or otherwise an image without a specialized purpose.
     * - MASK: The image is a mask image.
     * - CONTROL: The image is a ControlNet control image.
     * - USER: The image is a user-provide image.
     * - OTHER: The image is some other type of image with a specialized purpose. To be used by external nodes.
     * @enum {string}
     */
    ImageCategory: "general" | "mask" | "control" | "user" | "other";
    /**
     * Extract Image Channel
     * @description Gets a channel from an image.
     */
    ImageChannelInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to get the channel from */
      image?: components["schemas"]["ImageField"];
      /**
       * Channel
       * @description The channel to get
       * @default A
       * @enum {string}
       */
      channel?: "A" | "R" | "G" | "B";
      /**
       * type
       * @default img_chan
       * @constant
       */
      type: "img_chan";
    };
    /**
     * Multiply Image Channel
     * @description Scale a specific color channel of an image.
     */
    ImageChannelMultiplyInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to adjust */
      image?: components["schemas"]["ImageField"];
      /**
       * Channel
       * @description Which channel to adjust
       * @enum {string}
       */
      channel?: "Red (RGBA)" | "Green (RGBA)" | "Blue (RGBA)" | "Alpha (RGBA)" | "Cyan (CMYK)" | "Magenta (CMYK)" | "Yellow (CMYK)" | "Black (CMYK)" | "Hue (HSV)" | "Saturation (HSV)" | "Value (HSV)" | "Luminosity (LAB)" | "A (LAB)" | "B (LAB)" | "Y (YCbCr)" | "Cb (YCbCr)" | "Cr (YCbCr)";
      /**
       * Scale
       * @description The amount to scale the channel by.
       * @default 1
       */
      scale?: number;
      /**
       * Invert Channel
       * @description Invert the channel after scaling
       * @default false
       */
      invert_channel?: boolean;
      /**
       * type
       * @default img_channel_multiply
       * @constant
       */
      type: "img_channel_multiply";
    };
    /**
     * Offset Image Channel
     * @description Add or subtract a value from a specific color channel of an image.
     */
    ImageChannelOffsetInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to adjust */
      image?: components["schemas"]["ImageField"];
      /**
       * Channel
       * @description Which channel to adjust
       * @enum {string}
       */
      channel?: "Red (RGBA)" | "Green (RGBA)" | "Blue (RGBA)" | "Alpha (RGBA)" | "Cyan (CMYK)" | "Magenta (CMYK)" | "Yellow (CMYK)" | "Black (CMYK)" | "Hue (HSV)" | "Saturation (HSV)" | "Value (HSV)" | "Luminosity (LAB)" | "A (LAB)" | "B (LAB)" | "Y (YCbCr)" | "Cb (YCbCr)" | "Cr (YCbCr)";
      /**
       * Offset
       * @description The amount to adjust the channel by
       * @default 0
       */
      offset?: number;
      /**
       * type
       * @default img_channel_offset
       * @constant
       */
      type: "img_channel_offset";
    };
    /**
     * Image Collection Primitive
     * @description A collection of image primitive values
     */
    ImageCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of image values
       */
      collection?: components["schemas"]["ImageField"][];
      /**
       * type
       * @default image_collection
       * @constant
       */
      type: "image_collection";
    };
    /**
     * ImageCollectionOutput
     * @description Base class for nodes that output a collection of images
     */
    ImageCollectionOutput: {
      /**
       * Collection
       * @description The output images
       */
      collection: components["schemas"]["ImageField"][];
      /**
       * type
       * @default image_collection_output
       * @constant
       */
      type: "image_collection_output";
    };
    /**
     * Convert Image Mode
     * @description Converts an image to a different mode.
     */
    ImageConvertInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to convert */
      image?: components["schemas"]["ImageField"];
      /**
       * Mode
       * @description The mode to convert to
       * @default L
       * @enum {string}
       */
      mode?: "L" | "RGB" | "RGBA" | "CMYK" | "YCbCr" | "LAB" | "HSV" | "I" | "F";
      /**
       * type
       * @default img_conv
       * @constant
       */
      type: "img_conv";
    };
    /**
     * Crop Image
     * @description Crops an image to a specified box. The box can be outside of the image.
     */
    ImageCropInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to crop */
      image?: components["schemas"]["ImageField"];
      /**
       * X
       * @description The left x coordinate of the crop rectangle
       * @default 0
       */
      x?: number;
      /**
       * Y
       * @description The top y coordinate of the crop rectangle
       * @default 0
       */
      y?: number;
      /**
       * Width
       * @description The width of the crop rectangle
       * @default 512
       */
      width?: number;
      /**
       * Height
       * @description The height of the crop rectangle
       * @default 512
       */
      height?: number;
      /**
       * type
       * @default img_crop
       * @constant
       */
      type: "img_crop";
    };
    /**
     * ImageDTO
     * @description Deserialized image record, enriched for the frontend.
     */
    ImageDTO: {
      /**
       * Image Name
       * @description The unique name of the image.
       */
      image_name: string;
      /**
       * Image Url
       * @description The URL of the image.
       */
      image_url: string;
      /**
       * Thumbnail Url
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string;
      /** @description The type of the image. */
      image_origin: components["schemas"]["ResourceOrigin"];
      /** @description The category of the image. */
      image_category: components["schemas"]["ImageCategory"];
      /**
       * Width
       * @description The width of the image in px.
       */
      width: number;
      /**
       * Height
       * @description The height of the image in px.
       */
      height: number;
      /**
       * Created At
       * @description The created timestamp of the image.
       */
      created_at: string;
      /**
       * Updated At
       * @description The updated timestamp of the image.
       */
      updated_at: string;
      /**
       * Deleted At
       * @description The deleted timestamp of the image.
       */
      deleted_at?: string | null;
      /**
       * Is Intermediate
       * @description Whether this is an intermediate image.
       */
      is_intermediate: boolean;
      /**
       * Session Id
       * @description The session ID that generated this image, if it is a generated image.
       */
      session_id?: string | null;
      /**
       * Node Id
       * @description The node ID that generated this image, if it is a generated image.
       */
      node_id?: string | null;
      /**
       * Starred
       * @description Whether this image is starred.
       */
      starred: boolean;
      /**
       * Board Id
       * @description The id of the board the image belongs to, if one exists.
       */
      board_id?: string | null;
    };
    /**
     * ImageField
     * @description An image primitive field
     */
    ImageField: {
      /**
       * Image Name
       * @description The name of the image
       */
      image_name: string;
    };
    /**
     * Adjust Image Hue
     * @description Adjusts the Hue of an image.
     */
    ImageHueAdjustmentInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to adjust */
      image?: components["schemas"]["ImageField"];
      /**
       * Hue
       * @description The degrees by which to rotate the hue, 0-360
       * @default 0
       */
      hue?: number;
      /**
       * type
       * @default img_hue_adjust
       * @constant
       */
      type: "img_hue_adjust";
    };
    /**
     * Inverse Lerp Image
     * @description Inverse linear interpolation of all pixels of an image
     */
    ImageInverseLerpInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to lerp */
      image?: components["schemas"]["ImageField"];
      /**
       * Min
       * @description The minimum input value
       * @default 0
       */
      min?: number;
      /**
       * Max
       * @description The maximum input value
       * @default 255
       */
      max?: number;
      /**
       * type
       * @default img_ilerp
       * @constant
       */
      type: "img_ilerp";
    };
    /**
     * Image Primitive
     * @description An image primitive value
     */
    ImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to load */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default image
       * @constant
       */
      type: "image";
    };
    /**
     * Lerp Image
     * @description Linear interpolation of all pixels of an image
     */
    ImageLerpInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to lerp */
      image?: components["schemas"]["ImageField"];
      /**
       * Min
       * @description The minimum output value
       * @default 0
       */
      min?: number;
      /**
       * Max
       * @description The maximum output value
       * @default 255
       */
      max?: number;
      /**
       * type
       * @default img_lerp
       * @constant
       */
      type: "img_lerp";
    };
    /**
     * ImageMetadata
     * @description An image's generation metadata
     */
    ImageMetadata: {
      /**
       * Metadata
       * @description The image's core metadata, if it was created in the Linear or Canvas UI
       */
      metadata?: Record<string, never> | null;
      /**
       * Graph
       * @description The graph that created the image
       */
      graph?: Record<string, never> | null;
    };
    /**
     * Multiply Images
     * @description Multiplies two images together using `PIL.ImageChops.multiply()`.
     */
    ImageMultiplyInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The first image to multiply */
      image1?: components["schemas"]["ImageField"];
      /** @description The second image to multiply */
      image2?: components["schemas"]["ImageField"];
      /**
       * type
       * @default img_mul
       * @constant
       */
      type: "img_mul";
    };
    /**
     * Blur NSFW Image
     * @description Add blur to NSFW-flagged images
     */
    ImageNSFWBlurInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to check */
      image?: components["schemas"]["ImageField"];
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default img_nsfw
       * @constant
       */
      type: "img_nsfw";
    };
    /**
     * ImageOutput
     * @description Base class for nodes that output a single image
     */
    ImageOutput: {
      /** @description The output image */
      image: components["schemas"]["ImageField"];
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number;
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number;
      /**
       * type
       * @default image_output
       * @constant
       */
      type: "image_output";
    };
    /**
     * Paste Image
     * @description Pastes an image into another image.
     */
    ImagePasteInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The base image */
      base_image?: components["schemas"]["ImageField"];
      /** @description The image to paste */
      image?: components["schemas"]["ImageField"];
      /** @description The mask to use when pasting */
      mask?: components["schemas"]["ImageField"] | null;
      /**
       * X
       * @description The left x coordinate at which to paste the image
       * @default 0
       */
      x?: number;
      /**
       * Y
       * @description The top y coordinate at which to paste the image
       * @default 0
       */
      y?: number;
      /**
       * Crop
       * @description Crop to base image dimensions
       * @default false
       */
      crop?: boolean;
      /**
       * type
       * @default img_paste
       * @constant
       */
      type: "img_paste";
    };
    /**
     * ImageRecordChanges
     * @description A set of changes to apply to an image record.
     *
     * Only limited changes are valid:
     *   - `image_category`: change the category of an image
     *   - `session_id`: change the session associated with an image
     *   - `is_intermediate`: change the image's `is_intermediate` flag
     *   - `starred`: change whether the image is starred
     */
    ImageRecordChanges: {
      /** @description The image's new category. */
      image_category?: components["schemas"]["ImageCategory"] | null;
      /**
       * Session Id
       * @description The image's new session ID.
       */
      session_id?: string | null;
      /**
       * Is Intermediate
       * @description The image's new `is_intermediate` flag.
       */
      is_intermediate?: boolean | null;
      /**
       * Starred
       * @description The image's new `starred` state
       */
      starred?: boolean | null;
      [key: string]: unknown;
    };
    /**
     * Resize Image
     * @description Resizes an image to specific dimensions
     */
    ImageResizeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to resize */
      image?: components["schemas"]["ImageField"];
      /**
       * Width
       * @description The width to resize to (px)
       * @default 512
       */
      width?: number;
      /**
       * Height
       * @description The height to resize to (px)
       * @default 512
       */
      height?: number;
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "nearest" | "box" | "bilinear" | "hamming" | "bicubic" | "lanczos";
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default img_resize
       * @constant
       */
      type: "img_resize";
    };
    /**
     * Scale Image
     * @description Scales an image by a factor
     */
    ImageScaleInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to scale */
      image?: components["schemas"]["ImageField"];
      /**
       * Scale Factor
       * @description The factor by which to scale the image
       * @default 2
       */
      scale_factor?: number;
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "nearest" | "box" | "bilinear" | "hamming" | "bicubic" | "lanczos";
      /**
       * type
       * @default img_scale
       * @constant
       */
      type: "img_scale";
    };
    /**
     * Image to Latents
     * @description Encodes an image into latents.
     */
    ImageToLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to encode */
      image?: components["schemas"]["ImageField"];
      /** @description VAE */
      vae?: components["schemas"]["VaeField"];
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean;
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean;
      /**
       * type
       * @default i2l
       * @constant
       */
      type: "i2l";
    };
    /**
     * ImageUrlsDTO
     * @description The URLs for an image and its thumbnail.
     */
    ImageUrlsDTO: {
      /**
       * Image Name
       * @description The unique name of the image.
       */
      image_name: string;
      /**
       * Image Url
       * @description The URL of the image.
       */
      image_url: string;
      /**
       * Thumbnail Url
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string;
    };
    /**
     * Add Invisible Watermark
     * @description Add an invisible watermark to an image
     */
    ImageWatermarkInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to check */
      image?: components["schemas"]["ImageField"];
      /**
       * Text
       * @description Watermark text
       * @default InvokeAI
       */
      text?: string;
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default img_watermark
       * @constant
       */
      type: "img_watermark";
    };
    /** ImagesDownloaded */
    ImagesDownloaded: {
      /**
       * Response
       * @description If defined, the message to display to the user when images begin downloading
       */
      response: string | null;
    };
    /** ImagesUpdatedFromListResult */
    ImagesUpdatedFromListResult: {
      /**
       * Updated Image Names
       * @description The image names that were updated
       */
      updated_image_names: string[];
    };
    /**
     * Solid Color Infill
     * @description Infills transparent areas of an image with a solid color
     */
    InfillColorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to infill */
      image?: components["schemas"]["ImageField"];
      /**
       * @description The color to use to infill
       * @default {
       *   "a": 255,
       *   "b": 127,
       *   "g": 127,
       *   "r": 127
       * }
       */
      color?: components["schemas"]["ColorField"];
      /**
       * type
       * @default infill_rgba
       * @constant
       */
      type: "infill_rgba";
    };
    /**
     * PatchMatch Infill
     * @description Infills transparent areas of an image using the PatchMatch algorithm
     */
    InfillPatchMatchInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to infill */
      image?: components["schemas"]["ImageField"];
      /**
       * Downscale
       * @description Run patchmatch on downscaled image to speedup infill
       * @default 2
       */
      downscale?: number;
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "nearest" | "box" | "bilinear" | "hamming" | "bicubic" | "lanczos";
      /**
       * type
       * @default infill_patchmatch
       * @constant
       */
      type: "infill_patchmatch";
    };
    /**
     * Tile Infill
     * @description Infills transparent areas of an image with tiles of the image
     */
    InfillTileInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to infill */
      image?: components["schemas"]["ImageField"];
      /**
       * Tile Size
       * @description The tile size (px)
       * @default 32
       */
      tile_size?: number;
      /**
       * Seed
       * @description The seed to use for tile generation (omit for random)
       */
      seed?: number;
      /**
       * type
       * @default infill_tile
       * @constant
       */
      type: "infill_tile";
    };
    /**
     * Integer Collection Primitive
     * @description A collection of integer primitive values
     */
    IntegerCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of integer values
       */
      collection?: number[];
      /**
       * type
       * @default integer_collection
       * @constant
       */
      type: "integer_collection";
    };
    /**
     * IntegerCollectionOutput
     * @description Base class for nodes that output a collection of integers
     */
    IntegerCollectionOutput: {
      /**
       * Collection
       * @description The int collection
       */
      collection: number[];
      /**
       * type
       * @default integer_collection_output
       * @constant
       */
      type: "integer_collection_output";
    };
    /**
     * Integer Primitive
     * @description An integer primitive value
     */
    IntegerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The integer value
       * @default 0
       */
      value?: number;
      /**
       * type
       * @default integer
       * @constant
       */
      type: "integer";
    };
    /**
     * Integer Math
     * @description Performs integer math.
     */
    IntegerMathInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Operation
       * @description The operation to perform
       * @default ADD
       * @enum {string}
       */
      operation?: "ADD" | "SUB" | "MUL" | "DIV" | "EXP" | "MOD" | "ABS" | "MIN" | "MAX";
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default integer_math
       * @constant
       */
      type: "integer_math";
    };
    /**
     * IntegerOutput
     * @description Base class for nodes that output a single integer
     */
    IntegerOutput: {
      /**
       * Value
       * @description The output integer
       */
      value: number;
      /**
       * type
       * @default integer_output
       * @constant
       */
      type: "integer_output";
    };
    /** InvocationCacheStatus */
    InvocationCacheStatus: {
      /**
       * Size
       * @description The current size of the invocation cache
       */
      size: number;
      /**
       * Hits
       * @description The number of cache hits
       */
      hits: number;
      /**
       * Misses
       * @description The number of cache misses
       */
      misses: number;
      /**
       * Enabled
       * @description Whether the invocation cache is enabled
       */
      enabled: boolean;
      /**
       * Max Size
       * @description The maximum size of the invocation cache
       */
      max_size: number;
    };
    /**
     * IterateInvocation
     * @description Iterates over a list of items
     */
    IterateInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The list of items to iterate over
       */
      collection?: unknown[];
      /**
       * Index
       * @description The index, will be provided on executed iterators
       * @default 0
       */
      index?: number;
      /**
       * type
       * @default iterate
       * @constant
       */
      type: "iterate";
    };
    /**
     * IterateInvocationOutput
     * @description Used to connect iteration outputs. Will be expanded to a specific output.
     */
    IterateInvocationOutput: {
      /**
       * Collection Item
       * @description The item being iterated over
       */
      item: unknown;
      /**
       * type
       * @default iterate_output
       * @constant
       */
      type: "iterate_output";
    };
    /**
     * LaMa Infill
     * @description Infills transparent areas of an image using the LaMa model
     */
    LaMaInfillInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to infill */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default infill_lama
       * @constant
       */
      type: "infill_lama";
    };
    /**
     * Latents Collection Primitive
     * @description A collection of latents tensor primitive values
     */
    LatentsCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of latents tensors
       */
      collection?: components["schemas"]["LatentsField"][];
      /**
       * type
       * @default latents_collection
       * @constant
       */
      type: "latents_collection";
    };
    /**
     * LatentsCollectionOutput
     * @description Base class for nodes that output a collection of latents tensors
     */
    LatentsCollectionOutput: {
      /**
       * Collection
       * @description Latents tensor
       */
      collection: components["schemas"]["LatentsField"][];
      /**
       * type
       * @default latents_collection_output
       * @constant
       */
      type: "latents_collection_output";
    };
    /**
     * LatentsField
     * @description A latents tensor primitive field
     */
    LatentsField: {
      /**
       * Latents Name
       * @description The name of the latents
       */
      latents_name: string;
      /**
       * Seed
       * @description Seed used to generate this latents
       */
      seed?: number | null;
    };
    /**
     * Latents Primitive
     * @description A latents tensor primitive value
     */
    LatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The latents tensor */
      latents?: components["schemas"]["LatentsField"];
      /**
       * type
       * @default latents
       * @constant
       */
      type: "latents";
    };
    /**
     * LatentsOutput
     * @description Base class for nodes that output a single latents tensor
     */
    LatentsOutput: {
      /** @description Latents tensor */
      latents: components["schemas"]["LatentsField"];
      /**
       * Width
       * @description Width of output (px)
       */
      width: number;
      /**
       * Height
       * @description Height of output (px)
       */
      height: number;
      /**
       * type
       * @default latents_output
       * @constant
       */
      type: "latents_output";
    };
    /**
     * Latents to Image
     * @description Generates an image from latents.
     */
    LatentsToImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Latents tensor */
      latents?: components["schemas"]["LatentsField"];
      /** @description VAE */
      vae?: components["schemas"]["VaeField"];
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean;
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean;
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default l2i
       * @constant
       */
      type: "l2i";
    };
    /**
     * Leres (Depth) Processor
     * @description Applies leres processing to image
     */
    LeresImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Thr A
       * @description Leres parameter `thr_a`
       * @default 0
       */
      thr_a?: number;
      /**
       * Thr B
       * @description Leres parameter `thr_b`
       * @default 0
       */
      thr_b?: number;
      /**
       * Boost
       * @description Whether to use boost mode
       * @default false
       */
      boost?: boolean;
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * type
       * @default leres_image_processor
       * @constant
       */
      type: "leres_image_processor";
    };
    /**
     * Lineart Anime Processor
     * @description Applies line art anime processing to image
     */
    LineartAnimeImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * type
       * @default lineart_anime_image_processor
       * @constant
       */
      type: "lineart_anime_image_processor";
    };
    /**
     * Lineart Processor
     * @description Applies line art processing to image
     */
    LineartImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * Coarse
       * @description Whether to use coarse mode
       * @default false
       */
      coarse?: boolean;
      /**
       * type
       * @default lineart_image_processor
       * @constant
       */
      type: "lineart_image_processor";
    };
    /**
     * LoRAMetadataField
     * @description LoRA metadata for an image generated in InvokeAI.
     */
    LoRAMetadataField: {
      /** @description The LoRA model */
      lora: components["schemas"]["LoRAModelField"];
      /**
       * Weight
       * @description The weight of the LoRA model
       */
      weight: number;
    };
    /** LoRAModelConfig */
    LoRAModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default lora
       * @constant
       */
      model_type: "lora";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      model_format: components["schemas"]["LoRAModelFormat"];
      error?: components["schemas"]["ModelError"] | null;
    };
    /**
     * LoRAModelField
     * @description LoRA model field
     */
    LoRAModelField: {
      /**
       * Model Name
       * @description Name of the LoRA model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * LoRAModelFormat
     * @enum {string}
     */
    LoRAModelFormat: "lycoris" | "diffusers";
    /**
     * LogLevel
     * @enum {integer}
     */
    LogLevel: 0 | 10 | 20 | 30 | 40 | 50;
    /** LoraInfo */
    LoraInfo: {
      /**
       * Model Name
       * @description Info to load submodel
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"];
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"] | null;
      /**
       * Weight
       * @description Lora's weight which to use when apply to model
       */
      weight: number;
    };
    /**
     * LoRA
     * @description Apply selected lora to unet and text_encoder.
     */
    LoraLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * LoRA
       * @description LoRA model to load
       */
      lora: components["schemas"]["LoRAModelField"];
      /**
       * Weight
       * @description The weight at which the LoRA is applied to each model
       * @default 0.75
       */
      weight?: number;
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"] | null;
      /**
       * type
       * @default lora_loader
       * @constant
       */
      type: "lora_loader";
    };
    /**
     * LoraLoaderOutput
     * @description Model loader output
     */
    LoraLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"] | null;
      /**
       * type
       * @default lora_loader_output
       * @constant
       */
      type: "lora_loader_output";
    };
    /**
     * MainModelField
     * @description Main model field
     */
    MainModelField: {
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Model Type */
      model_type: components["schemas"]["ModelType"];
    };
    /**
     * Main Model
     * @description Loads a main model, outputting its submodels.
     */
    MainModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Main model (UNet, VAE, CLIP) to load */
      model: components["schemas"]["MainModelField"];
      /**
       * type
       * @default main_model_loader
       * @constant
       */
      type: "main_model_loader";
    };
    /**
     * Combine Masks
     * @description Combine two masks together by multiplying them using `PIL.ImageChops.multiply()`.
     */
    MaskCombineInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The first mask to combine */
      mask1?: components["schemas"]["ImageField"];
      /** @description The second image to combine */
      mask2?: components["schemas"]["ImageField"];
      /**
       * type
       * @default mask_combine
       * @constant
       */
      type: "mask_combine";
    };
    /**
     * Mask Edge
     * @description Applies an edge mask to an image
     */
    MaskEdgeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to apply the mask to */
      image?: components["schemas"]["ImageField"];
      /**
       * Edge Size
       * @description The size of the edge
       */
      edge_size?: number;
      /**
       * Edge Blur
       * @description The amount of blur on the edge
       */
      edge_blur?: number;
      /**
       * Low Threshold
       * @description First threshold for the hysteresis procedure in Canny edge detection
       */
      low_threshold?: number;
      /**
       * High Threshold
       * @description Second threshold for the hysteresis procedure in Canny edge detection
       */
      high_threshold?: number;
      /**
       * type
       * @default mask_edge
       * @constant
       */
      type: "mask_edge";
    };
    /**
     * Mask from Alpha
     * @description Extracts the alpha channel of an image as a mask.
     */
    MaskFromAlphaInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to create the mask from */
      image?: components["schemas"]["ImageField"];
      /**
       * Invert
       * @description Whether or not to invert the mask
       * @default false
       */
      invert?: boolean;
      /**
       * type
       * @default tomask
       * @constant
       */
      type: "tomask";
    };
    /**
     * Mediapipe Face Processor
     * @description Applies mediapipe face processing to image
     */
    MediapipeFaceProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Max Faces
       * @description Maximum number of faces to detect
       * @default 1
       */
      max_faces?: number;
      /**
       * Min Confidence
       * @description Minimum confidence for face detection
       * @default 0.5
       */
      min_confidence?: number;
      /**
       * type
       * @default mediapipe_face_processor
       * @constant
       */
      type: "mediapipe_face_processor";
    };
    /**
     * MergeInterpolationMethod
     * @enum {string}
     */
    MergeInterpolationMethod: "weighted_sum" | "sigmoid" | "inv_sigmoid" | "add_difference";
    /** MergeModelsBody */
    MergeModelsBody: {
      /**
       * Model Names
       * @description model name
       */
      model_names: string[];
      /**
       * Merged Model Name
       * @description Name of destination model
       */
      merged_model_name: string | null;
      /**
       * Alpha
       * @description Alpha weighting strength to apply to 2d and 3d models
       * @default 0.5
       */
      alpha?: number | null;
      /** @description Interpolation method */
      interp: components["schemas"]["MergeInterpolationMethod"] | null;
      /**
       * Force
       * @description Force merging of models created with different versions of diffusers
       * @default false
       */
      force?: boolean | null;
      /**
       * Merge Dest Directory
       * @description Save the merged model to the designated directory (with 'merged_model_name' appended)
       */
      merge_dest_directory?: string | null;
    };
    /**
     * Metadata Accumulator
     * @description Outputs a Core Metadata Object
     */
    MetadataAccumulatorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Generation Mode
       * @description The generation mode that output this image
       */
      generation_mode?: string | null;
      /**
       * Positive Prompt
       * @description The positive prompt parameter
       */
      positive_prompt?: string | null;
      /**
       * Negative Prompt
       * @description The negative prompt parameter
       */
      negative_prompt?: string | null;
      /**
       * Width
       * @description The width parameter
       */
      width?: number | null;
      /**
       * Height
       * @description The height parameter
       */
      height?: number | null;
      /**
       * Seed
       * @description The seed used for noise generation
       */
      seed?: number | null;
      /**
       * Rand Device
       * @description The device used for random number generation
       */
      rand_device?: string | null;
      /**
       * Cfg Scale
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale?: number | null;
      /**
       * Steps
       * @description The number of steps used for inference
       */
      steps?: number | null;
      /**
       * Scheduler
       * @description The scheduler used for inference
       */
      scheduler?: string | null;
      /**
       * Clip Skip
       * @description The number of skipped CLIP layers
       */
      clip_skip?: number | null;
      /** @description The main model used for inference */
      model?: components["schemas"]["MainModelField"] | null;
      /**
       * Controlnets
       * @description The ControlNets used for inference
       */
      controlnets?: components["schemas"]["ControlField"][] | null;
      /**
       * Ipadapters
       * @description The IP Adapters used for inference
       */
      ipAdapters?: components["schemas"]["IPAdapterMetadataField"][] | null;
      /**
       * T2Iadapters
       * @description The IP Adapters used for inference
       */
      t2iAdapters?: components["schemas"]["T2IAdapterField"][] | null;
      /**
       * Loras
       * @description The LoRAs used for inference
       */
      loras?: components["schemas"]["LoRAMetadataField"][] | null;
      /**
       * Strength
       * @description The strength used for latents-to-latents
       */
      strength?: number | null;
      /**
       * Init Image
       * @description The name of the initial image
       */
      init_image?: string | null;
      /** @description The VAE used for decoding, if the main model's default was not used */
      vae?: components["schemas"]["VAEModelField"] | null;
      /**
       * Hrf Width
       * @description The high resolution fix height and width multipler.
       */
      hrf_width?: number | null;
      /**
       * Hrf Height
       * @description The high resolution fix height and width multipler.
       */
      hrf_height?: number | null;
      /**
       * Hrf Strength
       * @description The high resolution fix img2img strength used in the upscale pass.
       */
      hrf_strength?: number | null;
      /**
       * Positive Style Prompt
       * @description The positive style prompt parameter
       */
      positive_style_prompt?: string | null;
      /**
       * Negative Style Prompt
       * @description The negative style prompt parameter
       */
      negative_style_prompt?: string | null;
      /** @description The SDXL Refiner model used */
      refiner_model?: components["schemas"]["MainModelField"] | null;
      /**
       * Refiner Cfg Scale
       * @description The classifier-free guidance scale parameter used for the refiner
       */
      refiner_cfg_scale?: number | null;
      /**
       * Refiner Steps
       * @description The number of steps used for the refiner
       */
      refiner_steps?: number | null;
      /**
       * Refiner Scheduler
       * @description The scheduler used for the refiner
       */
      refiner_scheduler?: string | null;
      /**
       * Refiner Positive Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_positive_aesthetic_score?: number | null;
      /**
       * Refiner Negative Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_negative_aesthetic_score?: number | null;
      /**
       * Refiner Start
       * @description The start value used for refiner denoising
       */
      refiner_start?: number | null;
      /**
       * type
       * @default metadata_accumulator
       * @constant
       */
      type: "metadata_accumulator";
    };
    /**
     * MetadataAccumulatorOutput
     * @description The output of the MetadataAccumulator node
     */
    MetadataAccumulatorOutput: {
      /** @description The core metadata for the image */
      metadata: components["schemas"]["CoreMetadata"];
      /**
       * type
       * @default metadata_accumulator_output
       * @constant
       */
      type: "metadata_accumulator_output";
    };
    /**
     * Midas Depth Processor
     * @description Applies Midas depth processing to image
     */
    MidasDepthImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * A Mult
       * @description Midas parameter `a_mult` (a = a_mult * PI)
       * @default 2
       */
      a_mult?: number;
      /**
       * Bg Th
       * @description Midas parameter `bg_th`
       * @default 0.1
       */
      bg_th?: number;
      /**
       * type
       * @default midas_depth_image_processor
       * @constant
       */
      type: "midas_depth_image_processor";
    };
    /**
     * MLSD Processor
     * @description Applies MLSD processing to image
     */
    MlsdImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * Thr V
       * @description MLSD parameter `thr_v`
       * @default 0.1
       */
      thr_v?: number;
      /**
       * Thr D
       * @description MLSD parameter `thr_d`
       * @default 0.1
       */
      thr_d?: number;
      /**
       * type
       * @default mlsd_image_processor
       * @constant
       */
      type: "mlsd_image_processor";
    };
    /**
     * ModelError
     * @constant
     */
    ModelError: "not_found";
    /** ModelInfo */
    ModelInfo: {
      /**
       * Model Name
       * @description Info to load submodel
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"];
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"] | null;
    };
    /**
     * ModelLoaderOutput
     * @description Model loader output
     */
    ModelLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"];
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"];
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"];
      /**
       * type
       * @default model_loader_output
       * @constant
       */
      type: "model_loader_output";
    };
    /**
     * ModelType
     * @enum {string}
     */
    ModelType: "onnx" | "main" | "vae" | "lora" | "controlnet" | "embedding" | "ip_adapter" | "clip_vision" | "t2i_adapter";
    /**
     * ModelVariantType
     * @enum {string}
     */
    ModelVariantType: "normal" | "inpaint" | "depth";
    /** ModelsList */
    ModelsList: {
      /** Models */
      models: (components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"])[];
    };
    /**
     * Multiply Integers
     * @description Multiplies two numbers
     */
    MultiplyInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default mul
       * @constant
       */
      type: "mul";
    };
    /** NodeFieldValue */
    NodeFieldValue: {
      /**
       * Node Path
       * @description The node into which this batch data item will be substituted.
       */
      node_path: string;
      /**
       * Field Name
       * @description The field into which this batch data item will be substituted.
       */
      field_name: string;
      /**
       * Value
       * @description The value to substitute into the node/field.
       */
      value: string | number;
    };
    /**
     * Noise
     * @description Generates latent noise.
     */
    NoiseInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Seed
       * @description Seed for random number generation
       */
      seed?: number;
      /**
       * Width
       * @description Width of output (px)
       * @default 512
       */
      width?: number;
      /**
       * Height
       * @description Height of output (px)
       * @default 512
       */
      height?: number;
      /**
       * Use Cpu
       * @description Use CPU for noise generation (for reproducible results across platforms)
       * @default true
       */
      use_cpu?: boolean;
      /**
       * type
       * @default noise
       * @constant
       */
      type: "noise";
    };
    /**
     * NoiseOutput
     * @description Invocation noise output
     */
    NoiseOutput: {
      /** @description Noise tensor */
      noise: components["schemas"]["LatentsField"];
      /**
       * Width
       * @description Width of output (px)
       */
      width: number;
      /**
       * Height
       * @description Height of output (px)
       */
      height: number;
      /**
       * type
       * @default noise_output
       * @constant
       */
      type: "noise_output";
    };
    /**
     * Normal BAE Processor
     * @description Applies NormalBae processing to image
     */
    NormalbaeImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * type
       * @default normalbae_image_processor
       * @constant
       */
      type: "normalbae_image_processor";
    };
    /**
     * ONNX Latents to Image
     * @description Generates an image from latents.
     */
    ONNXLatentsToImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Denoised latents tensor */
      latents?: components["schemas"]["LatentsField"];
      /** @description VAE */
      vae?: components["schemas"]["VaeField"];
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default l2i_onnx
       * @constant
       */
      type: "l2i_onnx";
    };
    /**
     * ONNXModelLoaderOutput
     * @description Model loader output
     */
    ONNXModelLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * VAE Decoder
       * @description VAE
       */
      vae_decoder?: components["schemas"]["VaeField"];
      /**
       * VAE Encoder
       * @description VAE
       */
      vae_encoder?: components["schemas"]["VaeField"];
      /**
       * type
       * @default model_loader_output_onnx
       * @constant
       */
      type: "model_loader_output_onnx";
    };
    /** ONNX Prompt (Raw) */
    ONNXPromptInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Prompt
       * @description Raw prompt text (no parsing)
       * @default
       */
      prompt?: string;
      /** @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count */
      clip?: components["schemas"]["ClipField"];
      /**
       * type
       * @default prompt_onnx
       * @constant
       */
      type: "prompt_onnx";
    };
    /** ONNXStableDiffusion1ModelConfig */
    ONNXStableDiffusion1ModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default onnx
       * @constant
       */
      model_type: "onnx";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "onnx";
      error?: components["schemas"]["ModelError"] | null;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** ONNXStableDiffusion2ModelConfig */
    ONNXStableDiffusion2ModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default onnx
       * @constant
       */
      model_type: "onnx";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "onnx";
      error?: components["schemas"]["ModelError"] | null;
      variant: components["schemas"]["ModelVariantType"];
      prediction_type: components["schemas"]["SchedulerPredictionType"];
      /** Upcast Attention */
      upcast_attention: boolean;
    };
    /**
     * ONNX Text to Latents
     * @description Generates latents from conditionings.
     */
    ONNXTextToLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Positive conditioning tensor */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /** @description Negative conditioning tensor */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /** @description Noise tensor */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Steps
       * @description Number of steps to run
       * @default 10
       */
      steps?: number;
      /**
       * Cfg Scale
       * @description Classifier-Free Guidance scale
       * @default 7.5
       */
      cfg_scale?: number | number[];
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Precision
       * @description Precision to use
       * @default tensor(float16)
       * @enum {string}
       */
      precision?: "tensor(bool)" | "tensor(int8)" | "tensor(uint8)" | "tensor(int16)" | "tensor(uint16)" | "tensor(int32)" | "tensor(uint32)" | "tensor(int64)" | "tensor(uint64)" | "tensor(float16)" | "tensor(float)" | "tensor(double)";
      /** @description UNet (scheduler, LoRAs) */
      unet?: components["schemas"]["UNetField"];
      /**
       * Control
       * @description ControlNet(s) to apply
       */
      control?: components["schemas"]["ControlField"] | components["schemas"]["ControlField"][];
      /**
       * type
       * @default t2l_onnx
       * @constant
       */
      type: "t2l_onnx";
    };
    /** OffsetPaginatedResults[BoardDTO] */
    OffsetPaginatedResults_BoardDTO_: {
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number;
      /**
       * Offset
       * @description Offset from which to retrieve items
       */
      offset: number;
      /**
       * Total
       * @description Total number of items in result
       */
      total: number;
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["BoardDTO"][];
    };
    /** OffsetPaginatedResults[ImageDTO] */
    OffsetPaginatedResults_ImageDTO_: {
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number;
      /**
       * Offset
       * @description Offset from which to retrieve items
       */
      offset: number;
      /**
       * Total
       * @description Total number of items in result
       */
      total: number;
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["ImageDTO"][];
    };
    /**
     * OnnxModelField
     * @description Onnx model field
     */
    OnnxModelField: {
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Model Type */
      model_type: components["schemas"]["ModelType"];
    };
    /**
     * ONNX Main Model
     * @description Loads a main model, outputting its submodels.
     */
    OnnxModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description ONNX Main model (UNet, VAE, CLIP) to load */
      model: components["schemas"]["OnnxModelField"];
      /**
       * type
       * @default onnx_model_loader
       * @constant
       */
      type: "onnx_model_loader";
    };
    /**
     * Openpose Processor
     * @description Applies Openpose processing to image
     */
    OpenposeImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Hand And Face
       * @description Whether to use hands and face mode
       * @default false
       */
      hand_and_face?: boolean;
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * type
       * @default openpose_image_processor
       * @constant
       */
      type: "openpose_image_processor";
    };
    /**
     * PIDI Processor
     * @description Applies PIDI processing to image
     */
    PidiImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number;
      /**
       * Safe
       * @description Whether or not to use safe mode
       * @default false
       */
      safe?: boolean;
      /**
       * Scribble
       * @description Whether or not to use scribble mode
       * @default false
       */
      scribble?: boolean;
      /**
       * type
       * @default pidi_image_processor
       * @constant
       */
      type: "pidi_image_processor";
    };
    /**
     * Prompts from File
     * @description Loads prompts from a text file
     */
    PromptsFromFileInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * File Path
       * @description Path to prompt text file
       */
      file_path?: string;
      /**
       * Pre Prompt
       * @description String to prepend to each prompt
       */
      pre_prompt?: string | null;
      /**
       * Post Prompt
       * @description String to append to each prompt
       */
      post_prompt?: string | null;
      /**
       * Start Line
       * @description Line in the file to start start from
       * @default 1
       */
      start_line?: number;
      /**
       * Max Prompts
       * @description Max lines to read from file (0=all)
       * @default 1
       */
      max_prompts?: number;
      /**
       * type
       * @default prompt_from_file
       * @constant
       */
      type: "prompt_from_file";
    };
    /**
     * PruneResult
     * @description Result of pruning the session queue
     */
    PruneResult: {
      /**
       * Deleted
       * @description Number of queue items deleted
       */
      deleted: number;
    };
    /**
     * Random Float
     * @description Outputs a single random float
     */
    RandomFloatInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean | null;
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number;
      /**
       * High
       * @description The exclusive high value
       * @default 1
       */
      high?: number;
      /**
       * Decimals
       * @description The number of decimal places to round to
       * @default 2
       */
      decimals?: number;
      /**
       * type
       * @default rand_float
       * @constant
       */
      type: "rand_float";
    };
    /**
     * Random Integer
     * @description Outputs a single random integer.
     */
    RandomIntInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean | null;
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number;
      /**
       * High
       * @description The exclusive high value
       * @default 2147483647
       */
      high?: number;
      /**
       * type
       * @default rand_int
       * @constant
       */
      type: "rand_int";
    };
    /**
     * Random Range
     * @description Creates a collection of random numbers
     */
    RandomRangeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean | null;
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number;
      /**
       * High
       * @description The exclusive high value
       * @default 2147483647
       */
      high?: number;
      /**
       * Size
       * @description The number of values to generate
       * @default 1
       */
      size?: number;
      /**
       * Seed
       * @description The seed for the RNG (omit for random)
       */
      seed?: number;
      /**
       * type
       * @default random_range
       * @constant
       */
      type: "random_range";
    };
    /**
     * Integer Range
     * @description Creates a range of numbers from start to stop with step
     */
    RangeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Start
       * @description The start of the range
       * @default 0
       */
      start?: number;
      /**
       * Stop
       * @description The stop of the range
       * @default 10
       */
      stop?: number;
      /**
       * Step
       * @description The step of the range
       * @default 1
       */
      step?: number;
      /**
       * type
       * @default range
       * @constant
       */
      type: "range";
    };
    /**
     * Integer Range of Size
     * @description Creates a range from start to start + (size * step) incremented by step
     */
    RangeOfSizeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Start
       * @description The start of the range
       * @default 0
       */
      start?: number;
      /**
       * Size
       * @description The number of values
       * @default 1
       */
      size?: number;
      /**
       * Step
       * @description The step of the range
       * @default 1
       */
      step?: number;
      /**
       * type
       * @default range_of_size
       * @constant
       */
      type: "range_of_size";
    };
    /** RemoveImagesFromBoardResult */
    RemoveImagesFromBoardResult: {
      /**
       * Removed Image Names
       * @description The image names that were removed from their board
       */
      removed_image_names: string[];
    };
    /**
     * Resize Latents
     * @description Resizes latents to explicit width/height (in pixels). Provided dimensions are floor-divided by 8.
     */
    ResizeLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Latents tensor */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Width
       * @description Width of output (px)
       */
      width?: number;
      /**
       * Height
       * @description Width of output (px)
       */
      height?: number;
      /**
       * Mode
       * @description Interpolation mode
       * @default bilinear
       * @enum {string}
       */
      mode?: "nearest" | "linear" | "bilinear" | "bicubic" | "trilinear" | "area" | "nearest-exact";
      /**
       * Antialias
       * @description Whether or not to apply antialiasing (bilinear or bicubic only)
       * @default false
       */
      antialias?: boolean;
      /**
       * type
       * @default lresize
       * @constant
       */
      type: "lresize";
    };
    /**
     * ResourceOrigin
     * @description The origin of a resource (eg image).
     *
     * - INTERNAL: The resource was created by the application.
     * - EXTERNAL: The resource was not created by the application.
     * This may be a user-initiated upload, or an internal application upload (eg Canvas init image).
     * @enum {string}
     */
    ResourceOrigin: "internal" | "external";
    /**
     * Round Float
     * @description Rounds a float to a specified number of decimal places.
     */
    RoundInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The float value
       * @default 0
       */
      value?: number;
      /**
       * Decimals
       * @description The number of decimal places
       * @default 0
       */
      decimals?: number;
      /**
       * type
       * @default round_float
       * @constant
       */
      type: "round_float";
    };
    /**
     * SDXL Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLCompelPromptInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Prompt
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      prompt?: string;
      /**
       * Style
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      style?: string;
      /**
       * Original Width
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left
       * @default 0
       */
      crop_left?: number;
      /**
       * Target Width
       * @default 1024
       */
      target_width?: number;
      /**
       * Target Height
       * @default 1024
       */
      target_height?: number;
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2?: components["schemas"]["ClipField"];
      /**
       * type
       * @default sdxl_compel_prompt
       * @constant
       */
      type: "sdxl_compel_prompt";
    };
    /**
     * SDXL LoRA
     * @description Apply selected lora to unet and text_encoder.
     */
    SDXLLoraLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * LoRA
       * @description LoRA model to load
       */
      lora: components["schemas"]["LoRAModelField"];
      /**
       * Weight
       * @description The weight at which the LoRA is applied to each model
       * @default 0.75
       */
      weight?: number;
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"] | null;
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2?: components["schemas"]["ClipField"] | null;
      /**
       * type
       * @default sdxl_lora_loader
       * @constant
       */
      type: "sdxl_lora_loader";
    };
    /**
     * SDXLLoraLoaderOutput
     * @description SDXL LoRA Loader Output
     */
    SDXLLoraLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"] | null;
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2?: components["schemas"]["ClipField"] | null;
      /**
       * type
       * @default sdxl_lora_loader_output
       * @constant
       */
      type: "sdxl_lora_loader_output";
    };
    /**
     * SDXL Main Model
     * @description Loads an sdxl base model, outputting its submodels.
     */
    SDXLModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description SDXL Main model (UNet, VAE, CLIP1, CLIP2) to load */
      model: components["schemas"]["MainModelField"];
      /**
       * type
       * @default sdxl_model_loader
       * @constant
       */
      type: "sdxl_model_loader";
    };
    /**
     * SDXLModelLoaderOutput
     * @description SDXL base model loader output
     */
    SDXLModelLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"];
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"];
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"];
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"];
      /**
       * type
       * @default sdxl_model_loader_output
       * @constant
       */
      type: "sdxl_model_loader_output";
    };
    /**
     * SDXL Refiner Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLRefinerCompelPromptInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Style
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      style?: string;
      /**
       * Original Width
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left
       * @default 0
       */
      crop_left?: number;
      /**
       * Aesthetic Score
       * @description The aesthetic score to apply to the conditioning tensor
       * @default 6
       */
      aesthetic_score?: number;
      /** @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count */
      clip2?: components["schemas"]["ClipField"];
      /**
       * type
       * @default sdxl_refiner_compel_prompt
       * @constant
       */
      type: "sdxl_refiner_compel_prompt";
    };
    /**
     * SDXL Refiner Model
     * @description Loads an sdxl refiner model, outputting its submodels.
     */
    SDXLRefinerModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description SDXL Refiner Main Modde (UNet, VAE, CLIP2) to load */
      model: components["schemas"]["MainModelField"];
      /**
       * type
       * @default sdxl_refiner_model_loader
       * @constant
       */
      type: "sdxl_refiner_model_loader";
    };
    /**
     * SDXLRefinerModelLoaderOutput
     * @description SDXL refiner model loader output
     */
    SDXLRefinerModelLoaderOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"];
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"];
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"];
      /**
       * type
       * @default sdxl_refiner_model_loader_output
       * @constant
       */
      type: "sdxl_refiner_model_loader_output";
    };
    /**
     * Save Image
     * @description Saves an image. Unlike an image primitive, this invocation stores a copy of the image.
     */
    SaveImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /** @description The board to save the image to */
      board?: components["schemas"]["BoardField"] | null;
      /** @description Optional core metadata to be written to image */
      metadata?: components["schemas"]["CoreMetadata"] | null;
      /**
       * type
       * @default save_image
       * @constant
       */
      type: "save_image";
    };
    /**
     * Scale Latents
     * @description Scales latents by a given factor.
     */
    ScaleLatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description Latents tensor */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Scale Factor
       * @description The factor by which to scale
       */
      scale_factor?: number;
      /**
       * Mode
       * @description Interpolation mode
       * @default bilinear
       * @enum {string}
       */
      mode?: "nearest" | "linear" | "bilinear" | "bicubic" | "trilinear" | "area" | "nearest-exact";
      /**
       * Antialias
       * @description Whether or not to apply antialiasing (bilinear or bicubic only)
       * @default false
       */
      antialias?: boolean;
      /**
       * type
       * @default lscale
       * @constant
       */
      type: "lscale";
    };
    /**
     * Scheduler
     * @description Selects a scheduler.
     */
    SchedulerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * type
       * @default scheduler
       * @constant
       */
      type: "scheduler";
    };
    /** SchedulerOutput */
    SchedulerOutput: {
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @enum {string}
       */
      scheduler: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * type
       * @default scheduler_output
       * @constant
       */
      type: "scheduler_output";
    };
    /**
     * SchedulerPredictionType
     * @enum {string}
     */
    SchedulerPredictionType: "epsilon" | "v_prediction" | "sample";
    /**
     * Seamless
     * @description Applies the seamless transformation to the Model UNet and VAE.
     */
    SeamlessModeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * VAE
       * @description VAE model to load
       */
      vae?: components["schemas"]["VaeField"] | null;
      /**
       * Seamless Y
       * @description Specify whether Y axis is seamless
       * @default true
       */
      seamless_y?: boolean;
      /**
       * Seamless X
       * @description Specify whether X axis is seamless
       * @default true
       */
      seamless_x?: boolean;
      /**
       * type
       * @default seamless
       * @constant
       */
      type: "seamless";
    };
    /**
     * SeamlessModeOutput
     * @description Modified Seamless Model output
     */
    SeamlessModeOutput: {
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"] | null;
      /**
       * VAE
       * @description VAE
       */
      vae?: components["schemas"]["VaeField"] | null;
      /**
       * type
       * @default seamless_output
       * @constant
       */
      type: "seamless_output";
    };
    /**
     * Segment Anything Processor
     * @description Applies segment anything processing to image
     */
    SegmentAnythingProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default segment_anything_processor
       * @constant
       */
      type: "segment_anything_processor";
    };
    /** SessionProcessorStatus */
    SessionProcessorStatus: {
      /**
       * Is Started
       * @description Whether the session processor is started
       */
      is_started: boolean;
      /**
       * Is Processing
       * @description Whether a session is being processed
       */
      is_processing: boolean;
    };
    /**
     * SessionQueueAndProcessorStatus
     * @description The overall status of session queue and processor
     */
    SessionQueueAndProcessorStatus: {
      queue: components["schemas"]["SessionQueueStatus"];
      processor: components["schemas"]["SessionProcessorStatus"];
    };
    /** SessionQueueItem */
    SessionQueueItem: {
      /**
       * Item Id
       * @description The identifier of the session queue item
       */
      item_id: number;
      /**
       * Status
       * @description The status of this queue item
       * @default pending
       * @enum {string}
       */
      status: "pending" | "in_progress" | "completed" | "failed" | "canceled";
      /**
       * Priority
       * @description The priority of this queue item
       * @default 0
       */
      priority: number;
      /**
       * Batch Id
       * @description The ID of the batch associated with this queue item
       */
      batch_id: string;
      /**
       * Session Id
       * @description The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed.
       */
      session_id: string;
      /**
       * Error
       * @description The error message if this queue item errored
       */
      error?: string | null;
      /**
       * Created At
       * @description When this queue item was created
       */
      created_at: string;
      /**
       * Updated At
       * @description When this queue item was updated
       */
      updated_at: string;
      /**
       * Started At
       * @description When this queue item was started
       */
      started_at?: string | null;
      /**
       * Completed At
       * @description When this queue item was completed
       */
      completed_at?: string | null;
      /**
       * Queue Id
       * @description The id of the queue with which this item is associated
       */
      queue_id: string;
      /**
       * Field Values
       * @description The field values that were used for this queue item
       */
      field_values?: components["schemas"]["NodeFieldValue"][] | null;
      /** @description The fully-populated session to be executed */
      session: components["schemas"]["GraphExecutionState"];
    };
    /** SessionQueueItemDTO */
    SessionQueueItemDTO: {
      /**
       * Item Id
       * @description The identifier of the session queue item
       */
      item_id: number;
      /**
       * Status
       * @description The status of this queue item
       * @default pending
       * @enum {string}
       */
      status: "pending" | "in_progress" | "completed" | "failed" | "canceled";
      /**
       * Priority
       * @description The priority of this queue item
       * @default 0
       */
      priority: number;
      /**
       * Batch Id
       * @description The ID of the batch associated with this queue item
       */
      batch_id: string;
      /**
       * Session Id
       * @description The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed.
       */
      session_id: string;
      /**
       * Error
       * @description The error message if this queue item errored
       */
      error?: string | null;
      /**
       * Created At
       * @description When this queue item was created
       */
      created_at: string;
      /**
       * Updated At
       * @description When this queue item was updated
       */
      updated_at: string;
      /**
       * Started At
       * @description When this queue item was started
       */
      started_at?: string | null;
      /**
       * Completed At
       * @description When this queue item was completed
       */
      completed_at?: string | null;
      /**
       * Queue Id
       * @description The id of the queue with which this item is associated
       */
      queue_id: string;
      /**
       * Field Values
       * @description The field values that were used for this queue item
       */
      field_values?: components["schemas"]["NodeFieldValue"][] | null;
    };
    /** SessionQueueStatus */
    SessionQueueStatus: {
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string;
      /**
       * Item Id
       * @description The current queue item id
       */
      item_id: number | null;
      /**
       * Batch Id
       * @description The current queue item's batch id
       */
      batch_id: string | null;
      /**
       * Session Id
       * @description The current queue item's session id
       */
      session_id: string | null;
      /**
       * Pending
       * @description Number of queue items with status 'pending'
       */
      pending: number;
      /**
       * In Progress
       * @description Number of queue items with status 'in_progress'
       */
      in_progress: number;
      /**
       * Completed
       * @description Number of queue items with status 'complete'
       */
      completed: number;
      /**
       * Failed
       * @description Number of queue items with status 'error'
       */
      failed: number;
      /**
       * Canceled
       * @description Number of queue items with status 'canceled'
       */
      canceled: number;
      /**
       * Total
       * @description Total number of queue items
       */
      total: number;
    };
    /**
     * Show Image
     * @description Displays a provided image using the OS image viewer, and passes it forward in the pipeline.
     */
    ShowImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to show */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default show_image
       * @constant
       */
      type: "show_image";
    };
    /** StableDiffusion1ModelCheckpointConfig */
    StableDiffusion1ModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion1ModelDiffusersConfig */
    StableDiffusion1ModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion2ModelCheckpointConfig */
    StableDiffusion2ModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion2ModelDiffusersConfig */
    StableDiffusion2ModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusionXLModelCheckpointConfig */
    StableDiffusionXLModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusionXLModelDiffusersConfig */
    StableDiffusionXLModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default main
       * @constant
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
      /** Vae */
      vae?: string | null;
      variant: components["schemas"]["ModelVariantType"];
    };
    /**
     * Step Param Easing
     * @description Experimental per-step parameter easing for denoising steps
     */
    StepParamEasingInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Easing
       * @description The easing function to use
       * @default Linear
       * @enum {string}
       */
      easing?: "Linear" | "QuadIn" | "QuadOut" | "QuadInOut" | "CubicIn" | "CubicOut" | "CubicInOut" | "QuarticIn" | "QuarticOut" | "QuarticInOut" | "QuinticIn" | "QuinticOut" | "QuinticInOut" | "SineIn" | "SineOut" | "SineInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "ExponentialIn" | "ExponentialOut" | "ExponentialInOut" | "ElasticIn" | "ElasticOut" | "ElasticInOut" | "BackIn" | "BackOut" | "BackInOut" | "BounceIn" | "BounceOut" | "BounceInOut";
      /**
       * Num Steps
       * @description number of denoising steps
       * @default 20
       */
      num_steps?: number;
      /**
       * Start Value
       * @description easing starting value
       * @default 0
       */
      start_value?: number;
      /**
       * End Value
       * @description easing ending value
       * @default 1
       */
      end_value?: number;
      /**
       * Start Step Percent
       * @description fraction of steps at which to start easing
       * @default 0
       */
      start_step_percent?: number;
      /**
       * End Step Percent
       * @description fraction of steps after which to end easing
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Pre Start Value
       * @description value before easing start
       */
      pre_start_value?: number | null;
      /**
       * Post End Value
       * @description value after easing end
       */
      post_end_value?: number | null;
      /**
       * Mirror
       * @description include mirror of easing function
       * @default false
       */
      mirror?: boolean;
      /**
       * Show Easing Plot
       * @description show easing plot
       * @default false
       */
      show_easing_plot?: boolean;
      /**
       * type
       * @default step_param_easing
       * @constant
       */
      type: "step_param_easing";
    };
    /**
     * String2Output
     * @description Base class for invocations that output two strings
     */
    String2Output: {
      /**
       * String 1
       * @description string 1
       */
      string_1: string;
      /**
       * String 2
       * @description string 2
       */
      string_2: string;
      /**
       * type
       * @default string_2_output
       * @constant
       */
      type: "string_2_output";
    };
    /**
     * String Collection Primitive
     * @description A collection of string primitive values
     */
    StringCollectionInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Collection
       * @description The collection of string values
       */
      collection?: string[];
      /**
       * type
       * @default string_collection
       * @constant
       */
      type: "string_collection";
    };
    /**
     * StringCollectionOutput
     * @description Base class for nodes that output a collection of strings
     */
    StringCollectionOutput: {
      /**
       * Collection
       * @description The output strings
       */
      collection: string[];
      /**
       * type
       * @default string_collection_output
       * @constant
       */
      type: "string_collection_output";
    };
    /**
     * String Primitive
     * @description A string primitive value
     */
    StringInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * Value
       * @description The string value
       * @default
       */
      value?: string;
      /**
       * type
       * @default string
       * @constant
       */
      type: "string";
    };
    /**
     * String Join
     * @description Joins string left to string right
     */
    StringJoinInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * String Left
       * @description String Left
       * @default
       */
      string_left?: string;
      /**
       * String Right
       * @description String Right
       * @default
       */
      string_right?: string;
      /**
       * type
       * @default string_join
       * @constant
       */
      type: "string_join";
    };
    /**
     * String Join Three
     * @description Joins string left to string middle to string right
     */
    StringJoinThreeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * String Left
       * @description String Left
       * @default
       */
      string_left?: string;
      /**
       * String Middle
       * @description String Middle
       * @default
       */
      string_middle?: string;
      /**
       * String Right
       * @description String Right
       * @default
       */
      string_right?: string;
      /**
       * type
       * @default string_join_three
       * @constant
       */
      type: "string_join_three";
    };
    /**
     * StringOutput
     * @description Base class for nodes that output a single string
     */
    StringOutput: {
      /**
       * Value
       * @description The output string
       */
      value: string;
      /**
       * type
       * @default string_output
       * @constant
       */
      type: "string_output";
    };
    /**
     * StringPosNegOutput
     * @description Base class for invocations that output a positive and negative string
     */
    StringPosNegOutput: {
      /**
       * Positive String
       * @description Positive string
       */
      positive_string: string;
      /**
       * Negative String
       * @description Negative string
       */
      negative_string: string;
      /**
       * type
       * @default string_pos_neg_output
       * @constant
       */
      type: "string_pos_neg_output";
    };
    /**
     * String Replace
     * @description Replaces the search string with the replace string
     */
    StringReplaceInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * String
       * @description String to work on
       * @default
       */
      string?: string;
      /**
       * Search String
       * @description String to search for
       * @default
       */
      search_string?: string;
      /**
       * Replace String
       * @description String to replace the search
       * @default
       */
      replace_string?: string;
      /**
       * Use Regex
       * @description Use search string as a regex expression (non regex is case insensitive)
       * @default false
       */
      use_regex?: boolean;
      /**
       * type
       * @default string_replace
       * @constant
       */
      type: "string_replace";
    };
    /**
     * String Split
     * @description Splits string into two strings, based on the first occurance of the delimiter. The delimiter will be removed from the string
     */
    StringSplitInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * String
       * @description String to split
       * @default
       */
      string?: string;
      /**
       * Delimiter
       * @description Delimiter to spilt with. blank will split on the first whitespace
       * @default
       */
      delimiter?: string;
      /**
       * type
       * @default string_split
       * @constant
       */
      type: "string_split";
    };
    /**
     * String Split Negative
     * @description Splits string into two strings, inside [] goes into negative string everthing else goes into positive string. Each [ and ] character is replaced with a space
     */
    StringSplitNegInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * String
       * @description String to split
       * @default
       */
      string?: string;
      /**
       * type
       * @default string_split_neg
       * @constant
       */
      type: "string_split_neg";
    };
    /**
     * SubModelType
     * @enum {string}
     */
    SubModelType: "unet" | "text_encoder" | "text_encoder_2" | "tokenizer" | "tokenizer_2" | "vae" | "vae_decoder" | "vae_encoder" | "scheduler" | "safety_checker";
    /**
     * Subtract Integers
     * @description Subtracts two numbers
     */
    SubtractInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number;
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number;
      /**
       * type
       * @default sub
       * @constant
       */
      type: "sub";
    };
    /** T2IAdapterField */
    T2IAdapterField: {
      /** @description The T2I-Adapter image prompt. */
      image: components["schemas"]["ImageField"];
      /** @description The T2I-Adapter model to use. */
      t2i_adapter_model: components["schemas"]["T2IAdapterModelField"];
      /**
       * Weight
       * @description The weight given to the T2I-Adapter
       * @default 1
       */
      weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the T2I-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the T2I-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Resize Mode
       * @description The resize mode to use
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "just_resize" | "crop_resize" | "fill_resize" | "just_resize_simple";
    };
    /**
     * T2I-Adapter
     * @description Collects T2I-Adapter info to pass to other nodes.
     */
    T2IAdapterInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The IP-Adapter image prompt. */
      image?: components["schemas"]["ImageField"];
      /**
       * T2I-Adapter Model
       * @description The T2I-Adapter model.
       */
      t2i_adapter_model: components["schemas"]["T2IAdapterModelField"];
      /**
       * Weight
       * @description The weight given to the T2I-Adapter
       * @default 1
       */
      weight?: number | number[];
      /**
       * Begin Step Percent
       * @description When the T2I-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent
       * @description When the T2I-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Resize Mode
       * @description The resize mode applied to the T2I-Adapter input image so that it matches the target output size.
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "just_resize" | "crop_resize" | "fill_resize" | "just_resize_simple";
      /**
       * type
       * @default t2i_adapter
       * @constant
       */
      type: "t2i_adapter";
    };
    /** T2IAdapterModelDiffusersConfig */
    T2IAdapterModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default t2i_adapter
       * @constant
       */
      model_type: "t2i_adapter";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /**
       * Model Format
       * @constant
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"] | null;
    };
    /** T2IAdapterModelField */
    T2IAdapterModelField: {
      /**
       * Model Name
       * @description Name of the T2I-Adapter model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /** T2IAdapterOutput */
    T2IAdapterOutput: {
      /**
       * T2I Adapter
       * @description T2I-Adapter(s) to apply
       */
      t2i_adapter: components["schemas"]["T2IAdapterField"];
      /**
       * type
       * @default t2i_adapter_output
       * @constant
       */
      type: "t2i_adapter_output";
    };
    /** TextualInversionModelConfig */
    TextualInversionModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default embedding
       * @constant
       */
      model_type: "embedding";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      /** Model Format */
      model_format: null;
      error?: components["schemas"]["ModelError"] | null;
    };
    /**
     * Tile Resample Processor
     * @description Tile resampler processor
     */
    TileResamplerProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * Down Sampling Rate
       * @description Down sampling rate
       * @default 1
       */
      down_sampling_rate?: number;
      /**
       * type
       * @default tile_image_processor
       * @constant
       */
      type: "tile_image_processor";
    };
    /** UNetField */
    UNetField: {
      /** @description Info to load unet submodel */
      unet: components["schemas"]["ModelInfo"];
      /** @description Info to load scheduler submodel */
      scheduler: components["schemas"]["ModelInfo"];
      /**
       * Loras
       * @description Loras to apply on model loading
       */
      loras: components["schemas"]["LoraInfo"][];
      /**
       * Seamless Axes
       * @description Axes("x" and "y") to which apply seamless
       */
      seamless_axes?: string[];
    };
    /** Upscaler */
    Upscaler: {
      /**
       * Upscaling Method
       * @description Name of upscaling method
       */
      upscaling_method: string;
      /**
       * Upscaling Models
       * @description List of upscaling models for this method
       */
      upscaling_models: string[];
    };
    /**
     * VAEModelField
     * @description Vae model field
     */
    VAEModelField: {
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /** VaeField */
    VaeField: {
      /** @description Info to load vae submodel */
      vae: components["schemas"]["ModelInfo"];
      /**
       * Seamless Axes
       * @description Axes("x" and "y") to which apply seamless
       */
      seamless_axes?: string[];
    };
    /**
     * VAE
     * @description Loads a VAE model, outputting a VaeLoaderOutput
     */
    VaeLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /**
       * VAE
       * @description VAE model to load
       */
      vae_model: components["schemas"]["VAEModelField"];
      /**
       * type
       * @default vae_loader
       * @constant
       */
      type: "vae_loader";
    };
    /**
     * VaeLoaderOutput
     * @description VAE output
     */
    VaeLoaderOutput: {
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"];
      /**
       * type
       * @default vae_loader_output
       * @constant
       */
      type: "vae_loader_output";
    };
    /** VaeModelConfig */
    VaeModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type
       * @default vae
       * @constant
       */
      model_type: "vae";
      /** Path */
      path: string;
      /** Description */
      description?: string | null;
      model_format: components["schemas"]["VaeModelFormat"];
      error?: components["schemas"]["ModelError"] | null;
    };
    /**
     * VaeModelFormat
     * @enum {string}
     */
    VaeModelFormat: "checkpoint" | "diffusers";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * Zoe (Depth) Processor
     * @description Applies Zoe depth processing to image
     */
    ZoeDepthImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string;
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean | null;
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string | null;
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean | null;
      /** @description The image to process */
      image?: components["schemas"]["ImageField"];
      /**
       * type
       * @default zoe_depth_image_processor
       * @constant
       */
      type: "zoe_depth_image_processor";
    };
    /**
     * Input
     * @description The type of input a field accepts.
     * - `Input.Direct`: The field must have its value provided directly, when the invocation and field       are instantiated.
     * - `Input.Connection`: The field must have its value provided by a connection.
     * - `Input.Any`: The field may have its value provided either directly or by a connection.
     * @enum {string}
     */
    Input: "connection" | "direct" | "any";
    /**
     * UIComponent
     * @description The type of UI component to use for a field, used to override the default components, which are     inferred from the field type.
     * @enum {string}
     */
    UIComponent: "none" | "textarea" | "slider";
    /**
     * UIConfigBase
     * @description Provides additional node configuration to the UI.
     * This is used internally by the @invocation decorator logic. Do not use this directly.
     */
    UIConfigBase: {
      /**
       * Tags
       * @description The node's tags
       */
      tags: string[] | null;
      /**
       * Title
       * @description The node's display name
       * @default null
       */
      title: string | null;
      /**
       * Category
       * @description The node's category
       * @default null
       */
      category: string | null;
      /**
       * Version
       * @description The node's version. Should be a valid semver string e.g. "1.0.0" or "3.8.13".
       * @default null
       */
      version: string | null;
    };
    /**
     * UIType
     * @description Type hints for the UI.
     * If a field should be provided a data type that does not exactly match the python type of the field,     use this to provide the type that should be used instead. See the node development docs for detail     on adding a new field type, which involves client-side changes.
     * @enum {string}
     */
    UIType: "boolean" | "ColorField" | "ConditioningField" | "ControlField" | "float" | "ImageField" | "integer" | "LatentsField" | "string" | "BooleanCollection" | "ColorCollection" | "ConditioningCollection" | "ControlCollection" | "FloatCollection" | "ImageCollection" | "IntegerCollection" | "LatentsCollection" | "StringCollection" | "BooleanPolymorphic" | "ColorPolymorphic" | "ConditioningPolymorphic" | "ControlPolymorphic" | "FloatPolymorphic" | "ImagePolymorphic" | "IntegerPolymorphic" | "LatentsPolymorphic" | "StringPolymorphic" | "MainModelField" | "SDXLMainModelField" | "SDXLRefinerModelField" | "ONNXModelField" | "VaeModelField" | "LoRAModelField" | "ControlNetModelField" | "IPAdapterModelField" | "UNetField" | "VaeField" | "ClipField" | "Collection" | "CollectionItem" | "enum" | "Scheduler" | "WorkflowField" | "IsIntermediate" | "MetadataField" | "BoardField";
    /**
     * _InputField
     * @description *DO NOT USE*
     * This helper class is used to tell the client about our custom field attributes via OpenAPI
     * schema generation, and Typescript type generation from that schema. It serves no functional
     * purpose in the backend.
     */
    _InputField: {
      input: components["schemas"]["Input"];
      /** Ui Hidden */
      ui_hidden: boolean;
      ui_type: components["schemas"]["UIType"] | null;
      ui_component: components["schemas"]["UIComponent"] | null;
      /** Ui Order */
      ui_order: number | null;
      /** Ui Choice Labels */
      ui_choice_labels: {
        [key: string]: string;
      } | null;
      /** Item Default */
      item_default: unknown;
    };
    /**
     * _OutputField
     * @description *DO NOT USE*
     * This helper class is used to tell the client about our custom field attributes via OpenAPI
     * schema generation, and Typescript type generation from that schema. It serves no functional
     * purpose in the backend.
     */
    _OutputField: {
      /** Ui Hidden */
      ui_hidden: boolean;
      ui_type: components["schemas"]["UIType"] | null;
      /** Ui Order */
      ui_order: number | null;
    };
    /**
     * ControlNetModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    ControlNetModelFormat: "checkpoint" | "diffusers";
    /**
     * StableDiffusion1ModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusion1ModelFormat: "checkpoint" | "diffusers";
    /**
     * StableDiffusionOnnxModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusionOnnxModelFormat: "olive" | "onnx";
    /**
     * StableDiffusion2ModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusion2ModelFormat: "checkpoint" | "diffusers";
    /**
     * IPAdapterModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    IPAdapterModelFormat: "invokeai";
    /**
     * CLIPVisionModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    CLIPVisionModelFormat: "diffusers";
    /**
     * T2IAdapterModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    T2IAdapterModelFormat: "diffusers";
    /**
     * StableDiffusionXLModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusionXLModelFormat: "checkpoint" | "diffusers";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Get Session
   * @description Gets a session
   */
  get_session: {
    parameters: {
      path: {
        /** @description The id of the session to get */
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Session not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Parse Dynamicprompts
   * @description Creates a batch process
   */
  parse_dynamicprompts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_parse_dynamicprompts"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicPromptsResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Models
   * @description Gets a list of models
   */
  list_models: {
    parameters: {
      query?: {
        /** @description Base models to include */
        base_models?: components["schemas"]["BaseModelType"][] | null;
        /** @description The type of model to get */
        model_type?: components["schemas"]["ModelType"] | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ModelsList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Model
   * @description Delete Model
   */
  del_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    responses: {
      /** @description Model deleted successfully */
      204: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Model
   * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
   */
  update_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
      };
    };
    responses: {
      /** @description The model was updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Bad request */
      400: {
        content: never;
      };
      /** @description The model could not be found */
      404: {
        content: never;
      };
      /** @description There is already a model corresponding to the new name */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Import Model
   * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
   */
  import_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_import_model"];
      };
    };
    responses: {
      /** @description The model imported successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description The model could not be found */
      404: {
        content: never;
      };
      /** @description There is already a model corresponding to this path or repo_id */
      409: {
        content: never;
      };
      /** @description Unrecognized file/folder format */
      415: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description The model appeared to import successfully, but could not be found in the model manager */
      424: {
        content: never;
      };
    };
  };
  /**
   * Add Model
   * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
   */
  add_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
      };
    };
    responses: {
      /** @description The model added successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description The model could not be found */
      404: {
        content: never;
      };
      /** @description There is already a model corresponding to this path or repo_id */
      409: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description The model appeared to add successfully, but could not be found in the model manager */
      424: {
        content: never;
      };
    };
  };
  /**
   * Convert Model
   * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
   */
  convert_model: {
    parameters: {
      query?: {
        /** @description Save the converted model to the designated directory */
        convert_dest_directory?: string | null;
      };
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Bad request */
      400: {
        content: never;
      };
      /** @description Model not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Search For Models */
  search_for_models: {
    parameters: {
      query: {
        /** @description Directory path to search for models */
        search_path: string;
      };
    };
    responses: {
      /** @description Directory searched successfully */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Invalid directory path */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Ckpt Configs
   * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
   */
  list_ckpt_configs: {
    responses: {
      /** @description paths retrieved successfully */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  /**
   * Sync To Config
   * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
   * in-memory data structures with disk data structures.
   */
  sync_to_config: {
    responses: {
      /** @description synchronization successful */
      201: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /**
   * Merge Models
   * @description Convert a checkpoint model into a diffusers model
   */
  merge_models: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_merge_models"];
      };
    };
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Incompatible models */
      400: {
        content: never;
      };
      /** @description One or more models not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Image
   * @description Uploads an image
   */
  upload_image: {
    parameters: {
      query: {
        /** @description The category of the image */
        image_category: components["schemas"]["ImageCategory"];
        /** @description Whether this is an intermediate image */
        is_intermediate: boolean;
        /** @description The board to add this image to, if any */
        board_id?: string | null;
        /** @description The session ID associated with this upload, if any */
        session_id?: string | null;
        /** @description Whether to crop the image */
        crop_visible?: boolean | null;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image"];
      };
    };
    responses: {
      /** @description The image was uploaded successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Image upload failed */
      415: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Dto
   * @description Gets an image's DTO
   */
  get_image_dto: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Image
   * @description Deletes an image
   */
  delete_image: {
    parameters: {
      path: {
        /** @description The name of the image to delete */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Image
   * @description Updates an image
   */
  update_image: {
    parameters: {
      path: {
        /** @description The name of the image to update */
        image_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageRecordChanges"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear Intermediates
   * @description Clears all intermediates
   */
  clear_intermediates: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /**
   * Get Image Metadata
   * @description Gets an image's metadata
   */
  get_image_metadata: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageMetadata"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Full
   * @description Gets a full-resolution image file
   */
  get_image_full: {
    parameters: {
      path: {
        /** @description The name of full-resolution image file to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Return the full-resolution image */
      200: {
        content: {
          "image/png": unknown;
        };
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Thumbnail
   * @description Gets a thumbnail image file
   */
  get_image_thumbnail: {
    parameters: {
      path: {
        /** @description The name of thumbnail image file to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Return the image thumbnail */
      200: {
        content: {
          "image/webp": unknown;
        };
      };
      /** @description Image not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Urls
   * @description Gets an image and thumbnail URL
   */
  get_image_urls: {
    parameters: {
      path: {
        /** @description The name of the image whose URL to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageUrlsDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Image Dtos
   * @description Gets a list of image DTOs
   */
  list_image_dtos: {
    parameters: {
      query?: {
        /** @description The origin of images to list. */
        image_origin?: components["schemas"]["ResourceOrigin"] | null;
        /** @description The categories of image to include. */
        categories?: components["schemas"]["ImageCategory"][] | null;
        /** @description Whether to list intermediate images. */
        is_intermediate?: boolean | null;
        /** @description The board id to filter by. Use 'none' to find images without a board. */
        board_id?: string | null;
        /** @description The page offset */
        offset?: number;
        /** @description The number of images per page */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_ImageDTO_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Images From List */
  delete_images_from_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_delete_images_from_list"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteImagesFromListResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Star Images In List */
  star_images_in_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_star_images_in_list"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesUpdatedFromListResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Unstar Images In List */
  unstar_images_in_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_unstar_images_in_list"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesUpdatedFromListResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Download Images From List */
  download_images_from_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_download_images_from_list"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesDownloaded"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Boards
   * @description Gets a list of boards
   */
  list_boards: {
    parameters: {
      query?: {
        /** @description Whether to list all boards */
        all?: boolean | null;
        /** @description The page offset */
        offset?: number | null;
        /** @description The number of boards per page */
        limit?: number | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_BoardDTO_"] | components["schemas"]["BoardDTO"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Board
   * @description Creates a board
   */
  create_board: {
    parameters: {
      query: {
        /** @description The name of the board to create */
        board_name: string;
      };
    };
    responses: {
      /** @description The board was created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Board
   * @description Gets a board
   */
  get_board: {
    parameters: {
      path: {
        /** @description The id of board to get */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Board
   * @description Deletes a board
   */
  delete_board: {
    parameters: {
      query?: {
        /** @description Permanently delete all images on the board */
        include_images?: boolean | null;
      };
      path: {
        /** @description The id of board to delete */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteBoardResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Board
   * @description Updates a board
   */
  update_board: {
    parameters: {
      path: {
        /** @description The id of board to update */
        board_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BoardChanges"];
      };
    };
    responses: {
      /** @description The board was updated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List All Board Image Names
   * @description Gets a list of images for a board
   */
  list_all_board_image_names: {
    parameters: {
      path: {
        /** @description The id of the board */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Image To Board
   * @description Creates a board_image
   */
  add_image_to_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_add_image_to_board"];
      };
    };
    responses: {
      /** @description The image was added to a board successfully */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove Image From Board
   * @description Removes an image from its board, if it had one
   */
  remove_image_from_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_remove_image_from_board"];
      };
    };
    responses: {
      /** @description The image was removed from the board successfully */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Images To Board
   * @description Adds a list of images to a board
   */
  add_images_to_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_add_images_to_board"];
      };
    };
    responses: {
      /** @description Images were added to board successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AddImagesToBoardResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove Images From Board
   * @description Removes a list of images from their board, if they had one
   */
  remove_images_from_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_remove_images_from_board"];
      };
    };
    responses: {
      /** @description Images were removed from board successfully */
      201: {
        content: {
          "application/json": components["schemas"]["RemoveImagesFromBoardResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Version */
  app_version: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppVersion"];
        };
      };
    };
  };
  /** Get Config */
  get_config: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppConfig"];
        };
      };
    };
  };
  /**
   * Get Log Level
   * @description Returns the log level
   */
  get_log_level: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": components["schemas"]["LogLevel"];
        };
      };
    };
  };
  /**
   * Set Log Level
   * @description Sets the log verbosity level
   */
  set_log_level: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LogLevel"];
      };
    };
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": components["schemas"]["LogLevel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear Invocation Cache
   * @description Clears the invocation cache
   */
  clear_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Enable Invocation Cache
   * @description Clears the invocation cache
   */
  enable_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Disable Invocation Cache
   * @description Clears the invocation cache
   */
  disable_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Invocation Cache Status
   * @description Clears the invocation cache
   */
  get_invocation_cache_status: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InvocationCacheStatus"];
        };
      };
    };
  };
  /**
   * Enqueue Batch
   * @description Processes a batch and enqueues the output graphs for execution.
   */
  enqueue_batch: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_enqueue_batch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EnqueueBatchResult"];
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EnqueueBatchResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Queue Items
   * @description Gets all queue items (without graphs)
   */
  list_queue_items: {
    parameters: {
      query?: {
        /** @description The number of items to fetch */
        limit?: number;
        /** @description The status of items to fetch */
        status?: ("pending" | "in_progress" | "completed" | "failed" | "canceled") | null;
        /** @description The pagination cursor */
        cursor?: number | null;
        /** @description The pagination cursor priority */
        priority?: number;
      };
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorPaginatedResults_SessionQueueItemDTO_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Resume
   * @description Resumes session processor
   */
  resume: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionProcessorStatus"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Pause
   * @description Pauses session processor
   */
  pause: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionProcessorStatus"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Cancel By Batch Ids
   * @description Immediately cancels all queue items from the given batch ids
   */
  cancel_by_batch_ids: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_cancel_by_batch_ids"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CancelByBatchIDsResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Clear
   * @description Clears the queue entirely, immediately canceling the currently-executing session
   */
  clear: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ClearResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Prune
   * @description Prunes all completed or errored queue items
   */
  prune: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PruneResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Current Queue Item
   * @description Gets the currently execution queue item
   */
  get_current_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Next Queue Item
   * @description Gets the next queue item, without executing it
   */
  get_next_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Queue Status
   * @description Gets the status of the session queue
   */
  get_queue_status: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueAndProcessorStatus"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Batch Status
   * @description Gets the status of the session queue
   */
  get_batch_status: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
        /** @description The batch to get the status of */
        batch_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BatchStatus"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Queue Item
   * @description Gets a queue item
   */
  get_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
        /** @description The queue item to get */
        item_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Cancel Queue Item
   * @description Deletes a queue item
   */
  cancel_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string;
        /** @description The queue item to cancel */
        item_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
};
