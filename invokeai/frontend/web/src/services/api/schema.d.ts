/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/api/v1/sessions/": {
    /**
     * List Sessions 
     * @description Gets a list of sessions, optionally searching
     */
    get: operations["list_sessions"];
    /**
     * Create Session 
     * @description Creates a new session, optionally initializing it with an invocation graph
     */
    post: operations["create_session"];
  };
  "/api/v1/sessions/{session_id}": {
    /**
     * Get Session 
     * @description Gets a session
     */
    get: operations["get_session"];
  };
  "/api/v1/sessions/{session_id}/nodes": {
    /**
     * Add Node 
     * @description Adds a node to the graph
     */
    post: operations["add_node"];
  };
  "/api/v1/sessions/{session_id}/nodes/{node_path}": {
    /**
     * Update Node 
     * @description Updates a node in the graph and removes all linked edges
     */
    put: operations["update_node"];
    /**
     * Delete Node 
     * @description Deletes a node in the graph and removes all linked edges
     */
    delete: operations["delete_node"];
  };
  "/api/v1/sessions/{session_id}/edges": {
    /**
     * Add Edge 
     * @description Adds an edge to the graph
     */
    post: operations["add_edge"];
  };
  "/api/v1/sessions/{session_id}/edges/{from_node_id}/{from_field}/{to_node_id}/{to_field}": {
    /**
     * Delete Edge 
     * @description Deletes an edge from the graph
     */
    delete: operations["delete_edge"];
  };
  "/api/v1/sessions/{session_id}/invoke": {
    /**
     * Invoke Session 
     * @description Invokes a session
     */
    put: operations["invoke_session"];
    /**
     * Cancel Session Invoke 
     * @description Invokes a session
     */
    delete: operations["cancel_session_invoke"];
  };
  "/api/v1/models/": {
    /**
     * List Models 
     * @description Gets a list of models
     */
    get: operations["list_models"];
  };
  "/api/v1/models/{base_model}/{model_type}/{model_name}": {
    /**
     * Delete Model 
     * @description Delete Model
     */
    delete: operations["del_model"];
    /**
     * Update Model 
     * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
     */
    patch: operations["update_model"];
  };
  "/api/v1/models/import": {
    /**
     * Import Model 
     * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
     */
    post: operations["import_model"];
  };
  "/api/v1/models/add": {
    /**
     * Add Model 
     * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
     */
    post: operations["add_model"];
  };
  "/api/v1/models/convert/{base_model}/{model_type}/{model_name}": {
    /**
     * Convert Model 
     * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
     */
    put: operations["convert_model"];
  };
  "/api/v1/models/search": {
    /** Search For Models */
    get: operations["search_for_models"];
  };
  "/api/v1/models/ckpt_confs": {
    /**
     * List Ckpt Configs 
     * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
     */
    get: operations["list_ckpt_configs"];
  };
  "/api/v1/models/sync": {
    /**
     * Sync To Config 
     * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
     * in-memory data structures with disk data structures.
     */
    get: operations["sync_to_config"];
  };
  "/api/v1/models/merge/{base_model}": {
    /**
     * Merge Models 
     * @description Convert a checkpoint model into a diffusers model
     */
    put: operations["merge_models"];
  };
  "/api/v1/images/": {
    /**
     * List Image Dtos 
     * @description Gets a list of image DTOs
     */
    get: operations["list_image_dtos"];
    /**
     * Upload Image 
     * @description Uploads an image
     */
    post: operations["upload_image"];
  };
  "/api/v1/images/{image_name}": {
    /**
     * Get Image Dto 
     * @description Gets an image's DTO
     */
    get: operations["get_image_dto"];
    /**
     * Delete Image 
     * @description Deletes an image
     */
    delete: operations["delete_image"];
    /**
     * Update Image 
     * @description Updates an image
     */
    patch: operations["update_image"];
  };
  "/api/v1/images/{image_name}/metadata": {
    /**
     * Get Image Metadata 
     * @description Gets an image's metadata
     */
    get: operations["get_image_metadata"];
  };
  "/api/v1/images/{image_name}/full": {
    /**
     * Get Image Full 
     * @description Gets a full-resolution image file
     */
    get: operations["get_image_full"];
  };
  "/api/v1/images/{image_name}/thumbnail": {
    /**
     * Get Image Thumbnail 
     * @description Gets a thumbnail image file
     */
    get: operations["get_image_thumbnail"];
  };
  "/api/v1/images/{image_name}/urls": {
    /**
     * Get Image Urls 
     * @description Gets an image and thumbnail URL
     */
    get: operations["get_image_urls"];
  };
  "/api/v1/boards/": {
    /**
     * List Boards 
     * @description Gets a list of boards
     */
    get: operations["list_boards"];
    /**
     * Create Board 
     * @description Creates a board
     */
    post: operations["create_board"];
  };
  "/api/v1/boards/{board_id}": {
    /**
     * Get Board 
     * @description Gets a board
     */
    get: operations["get_board"];
    /**
     * Delete Board 
     * @description Deletes a board
     */
    delete: operations["delete_board"];
    /**
     * Update Board 
     * @description Updates a board
     */
    patch: operations["update_board"];
  };
  "/api/v1/board_images/": {
    /**
     * Create Board Image 
     * @description Creates a board_image
     */
    post: operations["create_board_image"];
    /**
     * Remove Board Image 
     * @description Deletes a board_image
     */
    delete: operations["remove_board_image"];
  };
  "/api/v1/board_images/{board_id}": {
    /**
     * List Board Images 
     * @description Gets a list of images for a board
     */
    get: operations["list_board_images"];
  };
  "/api/v1/app/version": {
    /** Get Version */
    get: operations["app_version"];
  };
  "/api/v1/app/config": {
    /** Get Config */
    get: operations["get_config"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /**
     * AddInvocation 
     * @description Adds two numbers
     */
    AddInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default add 
       * @enum {string}
       */
      type?: "add";
      /**
       * A 
       * @description The first number 
       * @default 0
       */
      a?: number;
      /**
       * B 
       * @description The second number 
       * @default 0
       */
      b?: number;
    };
    /**
     * AppConfig 
     * @description App Config Response
     */
    AppConfig: {
      /**
       * Infill Methods 
       * @description List of available infill methods
       */
      infill_methods: (string)[];
    };
    /**
     * AppVersion 
     * @description App Version Response
     */
    AppVersion: {
      /**
       * Version 
       * @description App version
       */
      version: string;
    };
    /**
     * BaseModelType 
     * @description An enumeration. 
     * @enum {string}
     */
    BaseModelType: "sd-1" | "sd-2" | "sdxl" | "sdxl-refiner";
    /** BoardChanges */
    BoardChanges: {
      /**
       * Board Name 
       * @description The board's new name.
       */
      board_name?: string;
      /**
       * Cover Image Name 
       * @description The name of the board's new cover image.
       */
      cover_image_name?: string;
    };
    /**
     * BoardDTO 
     * @description Deserialized board record with cover image URL and image count.
     */
    BoardDTO: {
      /**
       * Board Id 
       * @description The unique ID of the board.
       */
      board_id: string;
      /**
       * Board Name 
       * @description The name of the board.
       */
      board_name: string;
      /**
       * Created At 
       * @description The created timestamp of the board.
       */
      created_at: string;
      /**
       * Updated At 
       * @description The updated timestamp of the board.
       */
      updated_at: string;
      /**
       * Deleted At 
       * @description The deleted timestamp of the board.
       */
      deleted_at?: string;
      /**
       * Cover Image Name 
       * @description The name of the board's cover image.
       */
      cover_image_name?: string;
      /**
       * Image Count 
       * @description The number of images in the board.
       */
      image_count: number;
    };
    /** Body_create_board_image */
    Body_create_board_image: {
      /**
       * Board Id 
       * @description The id of the board to add to
       */
      board_id: string;
      /**
       * Image Name 
       * @description The name of the image to add
       */
      image_name: string;
    };
    /** Body_import_model */
    Body_import_model: {
      /**
       * Location 
       * @description A model path, repo_id or URL to import
       */
      location: string;
      /**
       * Prediction Type 
       * @description Prediction type for SDv2 checkpoint files 
       * @default v_prediction 
       * @enum {string}
       */
      prediction_type?: "v_prediction" | "epsilon" | "sample";
    };
    /** Body_merge_models */
    Body_merge_models: {
      /**
       * Model Names 
       * @description model name
       */
      model_names: (string)[];
      /**
       * Merged Model Name 
       * @description Name of destination model
       */
      merged_model_name: string;
      /**
       * Alpha 
       * @description Alpha weighting strength to apply to 2d and 3d models 
       * @default 0.5
       */
      alpha?: number;
      /** @description Interpolation method */
      interp: components["schemas"]["MergeInterpolationMethod"];
      /**
       * Force 
       * @description Force merging of models created with different versions of diffusers 
       * @default false
       */
      force?: boolean;
      /**
       * Merge Dest Directory 
       * @description Save the merged model to the designated directory (with 'merged_model_name' appended)
       */
      merge_dest_directory?: string;
    };
    /** Body_remove_board_image */
    Body_remove_board_image: {
      /**
       * Board Id 
       * @description The id of the board
       */
      board_id: string;
      /**
       * Image Name 
       * @description The name of the image to remove
       */
      image_name: string;
    };
    /** Body_upload_image */
    Body_upload_image: {
      /**
       * File 
       * Format: binary
       */
      file: Blob;
    };
    /**
     * CannyImageProcessorInvocation 
     * @description Canny edge detection for ControlNet
     */
    CannyImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default canny_image_processor 
       * @enum {string}
       */
      type?: "canny_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Low Threshold 
       * @description The low threshold of the Canny pixel gradient (0-255) 
       * @default 100
       */
      low_threshold?: number;
      /**
       * High Threshold 
       * @description The high threshold of the Canny pixel gradient (0-255) 
       * @default 200
       */
      high_threshold?: number;
    };
    /** ClipField */
    ClipField: {
      /**
       * Tokenizer 
       * @description Info to load tokenizer submodel
       */
      tokenizer: components["schemas"]["ModelInfo"];
      /**
       * Text Encoder 
       * @description Info to load text_encoder submodel
       */
      text_encoder: components["schemas"]["ModelInfo"];
      /**
       * Skipped Layers 
       * @description Number of skipped layers in text_encoder
       */
      skipped_layers: number;
      /**
       * Loras 
       * @description Loras to apply on model loading
       */
      loras: (components["schemas"]["LoraInfo"])[];
    };
    /**
     * ClipSkipInvocation 
     * @description Skip layers in clip text_encoder model.
     */
    ClipSkipInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default clip_skip 
       * @enum {string}
       */
      type?: "clip_skip";
      /**
       * Clip 
       * @description Clip to use
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Skipped Layers 
       * @description Number of layers to skip in text_encoder 
       * @default 0
       */
      skipped_layers?: number;
    };
    /**
     * ClipSkipInvocationOutput 
     * @description Clip skip node output
     */
    ClipSkipInvocationOutput: {
      /**
       * Type 
       * @default clip_skip_output 
       * @enum {string}
       */
      type?: "clip_skip_output";
      /**
       * Clip 
       * @description Clip with skipped layers
       */
      clip?: components["schemas"]["ClipField"];
    };
    /**
     * CollectInvocation 
     * @description Collects values into a collection
     */
    CollectInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default collect 
       * @enum {string}
       */
      type?: "collect";
      /**
       * Item 
       * @description The item to collect (all inputs must be of the same type)
       */
      item?: unknown;
      /**
       * Collection 
       * @description The collection, will be provided on execution
       */
      collection?: (unknown)[];
    };
    /**
     * CollectInvocationOutput 
     * @description Base class for all invocation outputs
     */
    CollectInvocationOutput: {
      /**
       * Type 
       * @default collect_output 
       * @enum {string}
       */
      type: "collect_output";
      /**
       * Collection 
       * @description The collection of input items
       */
      collection: (unknown)[];
    };
    /** ColorField */
    ColorField: {
      /**
       * R 
       * @description The red component
       */
      r: number;
      /**
       * G 
       * @description The green component
       */
      g: number;
      /**
       * B 
       * @description The blue component
       */
      b: number;
      /**
       * A 
       * @description The alpha component
       */
      a: number;
    };
    /**
     * CompelInvocation 
     * @description Parse prompt using compel package to conditioning.
     */
    CompelInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default compel 
       * @enum {string}
       */
      type?: "compel";
      /**
       * Prompt 
       * @description Prompt 
       * @default
       */
      prompt?: string;
      /**
       * Clip 
       * @description Clip to use
       */
      clip?: components["schemas"]["ClipField"];
    };
    /**
     * CompelOutput 
     * @description Compel parser output
     */
    CompelOutput: {
      /**
       * Type 
       * @default compel_output 
       * @enum {string}
       */
      type?: "compel_output";
      /**
       * Conditioning 
       * @description Conditioning
       */
      conditioning?: components["schemas"]["ConditioningField"];
    };
    /** ConditioningField */
    ConditioningField: {
      /**
       * Conditioning Name 
       * @description The name of conditioning data
       */
      conditioning_name: string;
    };
    /**
     * ContentShuffleImageProcessorInvocation 
     * @description Applies content shuffle processing to image
     */
    ContentShuffleImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default content_shuffle_image_processor 
       * @enum {string}
       */
      type?: "content_shuffle_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
      /**
       * H 
       * @description Content shuffle `h` parameter 
       * @default 512
       */
      h?: number;
      /**
       * W 
       * @description Content shuffle `w` parameter 
       * @default 512
       */
      w?: number;
      /**
       * F 
       * @description Content shuffle `f` parameter 
       * @default 256
       */
      f?: number;
    };
    /** ControlField */
    ControlField: {
      /**
       * Image 
       * @description The control image
       */
      image: components["schemas"]["ImageField"];
      /**
       * Control Model 
       * @description The ControlNet model to use
       */
      control_model: components["schemas"]["ControlNetModelField"];
      /**
       * Control Weight 
       * @description The weight given to the ControlNet 
       * @default 1
       */
      control_weight: number | (number)[];
      /**
       * Begin Step Percent 
       * @description When the ControlNet is first applied (% of total steps) 
       * @default 0
       */
      begin_step_percent: number;
      /**
       * End Step Percent 
       * @description When the ControlNet is last applied (% of total steps) 
       * @default 1
       */
      end_step_percent: number;
      /**
       * Control Mode 
       * @description The control mode to use 
       * @default balanced 
       * @enum {string}
       */
      control_mode?: "balanced" | "more_prompt" | "more_control" | "unbalanced";
    };
    /**
     * ControlNetInvocation 
     * @description Collects ControlNet info to pass to other nodes
     */
    ControlNetInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default controlnet 
       * @enum {string}
       */
      type?: "controlnet";
      /**
       * Image 
       * @description The control image
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Control Model 
       * @description control model used 
       * @default lllyasviel/sd-controlnet-canny
       */
      control_model?: components["schemas"]["ControlNetModelField"];
      /**
       * Control Weight 
       * @description The weight given to the ControlNet 
       * @default 1
       */
      control_weight?: number | (number)[];
      /**
       * Begin Step Percent 
       * @description When the ControlNet is first applied (% of total steps) 
       * @default 0
       */
      begin_step_percent?: number;
      /**
       * End Step Percent 
       * @description When the ControlNet is last applied (% of total steps) 
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Control Mode 
       * @description The control mode used 
       * @default balanced 
       * @enum {string}
       */
      control_mode?: "balanced" | "more_prompt" | "more_control" | "unbalanced";
    };
    /** ControlNetModelConfig */
    ControlNetModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "controlnet";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      model_format: components["schemas"]["ControlNetModelFormat"];
      error?: components["schemas"]["ModelError"];
    };
    /**
     * ControlNetModelField 
     * @description ControlNet model field
     */
    ControlNetModelField: {
      /**
       * Model Name 
       * @description Name of the ControlNet model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * ControlNetModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    ControlNetModelFormat: "checkpoint" | "diffusers";
    /**
     * ControlOutput 
     * @description node output for ControlNet info
     */
    ControlOutput: {
      /**
       * Type 
       * @default control_output 
       * @enum {string}
       */
      type?: "control_output";
      /**
       * Control 
       * @description The control info
       */
      control?: components["schemas"]["ControlField"];
    };
    /**
     * CoreMetadata 
     * @description Core generation metadata for an image generated in InvokeAI.
     */
    CoreMetadata: {
      /**
       * Generation Mode 
       * @description The generation mode that output this image
       */
      generation_mode: string;
      /**
       * Positive Prompt 
       * @description The positive prompt parameter
       */
      positive_prompt: string;
      /**
       * Negative Prompt 
       * @description The negative prompt parameter
       */
      negative_prompt: string;
      /**
       * Width 
       * @description The width parameter
       */
      width: number;
      /**
       * Height 
       * @description The height parameter
       */
      height: number;
      /**
       * Seed 
       * @description The seed used for noise generation
       */
      seed: number;
      /**
       * Rand Device 
       * @description The device used for random number generation
       */
      rand_device: string;
      /**
       * Cfg Scale 
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale: number;
      /**
       * Steps 
       * @description The number of steps used for inference
       */
      steps: number;
      /**
       * Scheduler 
       * @description The scheduler used for inference
       */
      scheduler: string;
      /**
       * Clip Skip 
       * @description The number of skipped CLIP layers
       */
      clip_skip: number;
      /**
       * Model 
       * @description The main model used for inference
       */
      model: components["schemas"]["MainModelField"];
      /**
       * Controlnets 
       * @description The ControlNets used for inference
       */
      controlnets: (components["schemas"]["ControlField"])[];
      /**
       * Loras 
       * @description The LoRAs used for inference
       */
      loras: (components["schemas"]["LoRAMetadataField"])[];
      /**
       * Strength 
       * @description The strength used for latents-to-latents
       */
      strength?: number;
      /**
       * Init Image 
       * @description The name of the initial image
       */
      init_image?: string;
      /**
       * Vae 
       * @description The VAE used for decoding, if the main model's default was not used
       */
      vae?: components["schemas"]["VAEModelField"];
    };
    /**
     * CvInpaintInvocation 
     * @description Simple inpaint using opencv.
     */
    CvInpaintInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default cv_inpaint 
       * @enum {string}
       */
      type?: "cv_inpaint";
      /**
       * Image 
       * @description The image to inpaint
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Mask 
       * @description The mask to use when inpainting
       */
      mask?: components["schemas"]["ImageField"];
    };
    /**
     * DivideInvocation 
     * @description Divides two numbers
     */
    DivideInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default div 
       * @enum {string}
       */
      type?: "div";
      /**
       * A 
       * @description The first number 
       * @default 0
       */
      a?: number;
      /**
       * B 
       * @description The second number 
       * @default 0
       */
      b?: number;
    };
    /**
     * DynamicPromptInvocation 
     * @description Parses a prompt using adieyal/dynamicprompts' random or combinatorial generator
     */
    DynamicPromptInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default dynamic_prompt 
       * @enum {string}
       */
      type?: "dynamic_prompt";
      /**
       * Prompt 
       * @description The prompt to parse with dynamicprompts
       */
      prompt: string;
      /**
       * Max Prompts 
       * @description The number of prompts to generate 
       * @default 1
       */
      max_prompts?: number;
      /**
       * Combinatorial 
       * @description Whether to use the combinatorial generator 
       * @default false
       */
      combinatorial?: boolean;
    };
    /**
     * ESRGANInvocation 
     * @description Upscales an image using RealESRGAN.
     */
    ESRGANInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default esrgan 
       * @enum {string}
       */
      type?: "esrgan";
      /**
       * Image 
       * @description The input image
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Model Name 
       * @description The Real-ESRGAN model to use 
       * @default RealESRGAN_x4plus.pth 
       * @enum {string}
       */
      model_name?: "RealESRGAN_x4plus.pth" | "RealESRGAN_x4plus_anime_6B.pth" | "ESRGAN_SRx4_DF2KOST_official-ff704c30.pth" | "RealESRGAN_x2plus.pth";
    };
    /** Edge */
    Edge: {
      /**
       * Source 
       * @description The connection for the edge's from node and field
       */
      source: components["schemas"]["EdgeConnection"];
      /**
       * Destination 
       * @description The connection for the edge's to node and field
       */
      destination: components["schemas"]["EdgeConnection"];
    };
    /** EdgeConnection */
    EdgeConnection: {
      /**
       * Node Id 
       * @description The id of the node for this edge connection
       */
      node_id: string;
      /**
       * Field 
       * @description The field for this connection
       */
      field: string;
    };
    /**
     * FloatCollectionOutput 
     * @description A collection of floats
     */
    FloatCollectionOutput: {
      /**
       * Type 
       * @default float_collection 
       * @enum {string}
       */
      type?: "float_collection";
      /**
       * Collection 
       * @description The float collection 
       * @default []
       */
      collection?: (number)[];
    };
    /**
     * FloatLinearRangeInvocation 
     * @description Creates a range
     */
    FloatLinearRangeInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default float_range 
       * @enum {string}
       */
      type?: "float_range";
      /**
       * Start 
       * @description The first value of the range 
       * @default 5
       */
      start?: number;
      /**
       * Stop 
       * @description The last value of the range 
       * @default 10
       */
      stop?: number;
      /**
       * Steps 
       * @description number of values to interpolate over (including start and stop) 
       * @default 30
       */
      steps?: number;
    };
    /**
     * FloatOutput 
     * @description A float output
     */
    FloatOutput: {
      /**
       * Type 
       * @default float_output 
       * @enum {string}
       */
      type?: "float_output";
      /**
       * Param 
       * @description The output float
       */
      param?: number;
    };
    /** Graph */
    Graph: {
      /**
       * Id 
       * @description The id of this graph
       */
      id?: string;
      /**
       * Nodes 
       * @description The nodes in this graph
       */
      nodes?: {
        [key: string]: (components["schemas"]["LoadImageInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRawPromptInvocation"] | components["schemas"]["SDXLRefinerRawPromptInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["TextToLatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["InpaintInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["ParamIntInvocation"] | components["schemas"]["ParamFloatInvocation"] | components["schemas"]["ParamStringInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SDXLTextToLatentsInvocation"] | components["schemas"]["SDXLLatentsToLatentsInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["LatentsToLatentsInvocation"]) | undefined;
      };
      /**
       * Edges 
       * @description The connections between nodes and their fields in this graph
       */
      edges?: (components["schemas"]["Edge"])[];
    };
    /**
     * GraphExecutionState 
     * @description Tracks the state of a graph execution
     */
    GraphExecutionState: {
      /**
       * Id 
       * @description The id of the execution state
       */
      id: string;
      /**
       * Graph 
       * @description The graph being executed
       */
      graph: components["schemas"]["Graph"];
      /**
       * Execution Graph 
       * @description The expanded graph of activated and executed nodes
       */
      execution_graph: components["schemas"]["Graph"];
      /**
       * Executed 
       * @description The set of node ids that have been executed
       */
      executed: (string)[];
      /**
       * Executed History 
       * @description The list of node ids that have been executed, in order of execution
       */
      executed_history: (string)[];
      /**
       * Results 
       * @description The results of node executions
       */
      results: {
        [key: string]: (components["schemas"]["ImageOutput"] | components["schemas"]["MaskOutput"] | components["schemas"]["ControlOutput"] | components["schemas"]["ModelLoaderOutput"] | components["schemas"]["LoraLoaderOutput"] | components["schemas"]["VaeLoaderOutput"] | components["schemas"]["MetadataAccumulatorOutput"] | components["schemas"]["CompelOutput"] | components["schemas"]["ClipSkipInvocationOutput"] | components["schemas"]["LatentsOutput"] | components["schemas"]["IntOutput"] | components["schemas"]["FloatOutput"] | components["schemas"]["StringOutput"] | components["schemas"]["IntCollectionOutput"] | components["schemas"]["FloatCollectionOutput"] | components["schemas"]["ImageCollectionOutput"] | components["schemas"]["PromptOutput"] | components["schemas"]["PromptCollectionOutput"] | components["schemas"]["NoiseOutput"] | components["schemas"]["SDXLModelLoaderOutput"] | components["schemas"]["SDXLRefinerModelLoaderOutput"] | components["schemas"]["GraphInvocationOutput"] | components["schemas"]["IterateInvocationOutput"] | components["schemas"]["CollectInvocationOutput"]) | undefined;
      };
      /**
       * Errors 
       * @description Errors raised when executing nodes
       */
      errors: {
        [key: string]: string | undefined;
      };
      /**
       * Prepared Source Mapping 
       * @description The map of prepared nodes to original graph nodes
       */
      prepared_source_mapping: {
        [key: string]: string | undefined;
      };
      /**
       * Source Prepared Mapping 
       * @description The map of original graph nodes to prepared nodes
       */
      source_prepared_mapping: {
        [key: string]: (string)[] | undefined;
      };
    };
    /**
     * GraphInvocation 
     * @description Execute a graph
     */
    GraphInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default graph 
       * @enum {string}
       */
      type?: "graph";
      /**
       * Graph 
       * @description The graph to run
       */
      graph?: components["schemas"]["Graph"];
    };
    /**
     * GraphInvocationOutput 
     * @description Base class for all invocation outputs
     */
    GraphInvocationOutput: {
      /**
       * Type 
       * @default graph_output 
       * @enum {string}
       */
      type: "graph_output";
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /**
     * HedImageProcessorInvocation 
     * @description Applies HED edge detection to image
     */
    HedImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default hed_image_processor 
       * @enum {string}
       */
      type?: "hed_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
      /**
       * Scribble 
       * @description Whether to use scribble mode 
       * @default false
       */
      scribble?: boolean;
    };
    /**
     * ImageBlurInvocation 
     * @description Blurs an image
     */
    ImageBlurInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_blur 
       * @enum {string}
       */
      type?: "img_blur";
      /**
       * Image 
       * @description The image to blur
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Radius 
       * @description The blur radius 
       * @default 8
       */
      radius?: number;
      /**
       * Blur Type 
       * @description The type of blur 
       * @default gaussian 
       * @enum {string}
       */
      blur_type?: "gaussian" | "box";
    };
    /**
     * ImageCategory 
     * @description The category of an image.
     * 
     * - GENERAL: The image is an output, init image, or otherwise an image without a specialized purpose.
     * - MASK: The image is a mask image.
     * - CONTROL: The image is a ControlNet control image.
     * - USER: The image is a user-provide image.
     * - OTHER: The image is some other type of image with a specialized purpose. To be used by external nodes. 
     * @enum {string}
     */
    ImageCategory: "general" | "mask" | "control" | "user" | "other";
    /**
     * ImageChannelInvocation 
     * @description Gets a channel from an image.
     */
    ImageChannelInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_chan 
       * @enum {string}
       */
      type?: "img_chan";
      /**
       * Image 
       * @description The image to get the channel from
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Channel 
       * @description The channel to get 
       * @default A 
       * @enum {string}
       */
      channel?: "A" | "R" | "G" | "B";
    };
    /**
     * ImageCollectionInvocation 
     * @description Load a collection of images and provide it as output.
     */
    ImageCollectionInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default image_collection 
       * @enum {string}
       */
      type?: "image_collection";
      /**
       * Images 
       * @description The image collection to load 
       * @default []
       */
      images?: (components["schemas"]["ImageField"])[];
    };
    /**
     * ImageCollectionOutput 
     * @description A collection of images
     */
    ImageCollectionOutput: {
      /**
       * Type 
       * @default image_collection 
       * @enum {string}
       */
      type: "image_collection";
      /**
       * Collection 
       * @description The output images 
       * @default []
       */
      collection: (components["schemas"]["ImageField"])[];
    };
    /**
     * ImageConvertInvocation 
     * @description Converts an image to a different mode.
     */
    ImageConvertInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_conv 
       * @enum {string}
       */
      type?: "img_conv";
      /**
       * Image 
       * @description The image to convert
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Mode 
       * @description The mode to convert to 
       * @default L 
       * @enum {string}
       */
      mode?: "L" | "RGB" | "RGBA" | "CMYK" | "YCbCr" | "LAB" | "HSV" | "I" | "F";
    };
    /**
     * ImageCropInvocation 
     * @description Crops an image to a specified box. The box can be outside of the image.
     */
    ImageCropInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_crop 
       * @enum {string}
       */
      type?: "img_crop";
      /**
       * Image 
       * @description The image to crop
       */
      image?: components["schemas"]["ImageField"];
      /**
       * X 
       * @description The left x coordinate of the crop rectangle 
       * @default 0
       */
      x?: number;
      /**
       * Y 
       * @description The top y coordinate of the crop rectangle 
       * @default 0
       */
      y?: number;
      /**
       * Width 
       * @description The width of the crop rectangle 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @description The height of the crop rectangle 
       * @default 512
       */
      height?: number;
    };
    /**
     * ImageDTO 
     * @description Deserialized image record, enriched for the frontend.
     */
    ImageDTO: {
      /**
       * Image Name 
       * @description The unique name of the image.
       */
      image_name: string;
      /**
       * Image Url 
       * @description The URL of the image.
       */
      image_url: string;
      /**
       * Thumbnail Url 
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string;
      /** @description The type of the image. */
      image_origin: components["schemas"]["ResourceOrigin"];
      /** @description The category of the image. */
      image_category: components["schemas"]["ImageCategory"];
      /**
       * Width 
       * @description The width of the image in px.
       */
      width: number;
      /**
       * Height 
       * @description The height of the image in px.
       */
      height: number;
      /**
       * Created At 
       * @description The created timestamp of the image.
       */
      created_at: string;
      /**
       * Updated At 
       * @description The updated timestamp of the image.
       */
      updated_at: string;
      /**
       * Deleted At 
       * @description The deleted timestamp of the image.
       */
      deleted_at?: string;
      /**
       * Is Intermediate 
       * @description Whether this is an intermediate image.
       */
      is_intermediate: boolean;
      /**
       * Session Id 
       * @description The session ID that generated this image, if it is a generated image.
       */
      session_id?: string;
      /**
       * Node Id 
       * @description The node ID that generated this image, if it is a generated image.
       */
      node_id?: string;
      /**
       * Board Id 
       * @description The id of the board the image belongs to, if one exists.
       */
      board_id?: string;
    };
    /**
     * ImageField 
     * @description An image field used for passing image objects between invocations
     */
    ImageField: {
      /**
       * Image Name 
       * @description The name of the image
       */
      image_name: string;
    };
    /**
     * ImageInverseLerpInvocation 
     * @description Inverse linear interpolation of all pixels of an image
     */
    ImageInverseLerpInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_ilerp 
       * @enum {string}
       */
      type?: "img_ilerp";
      /**
       * Image 
       * @description The image to lerp
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Min 
       * @description The minimum input value 
       * @default 0
       */
      min?: number;
      /**
       * Max 
       * @description The maximum input value 
       * @default 255
       */
      max?: number;
    };
    /**
     * ImageLerpInvocation 
     * @description Linear interpolation of all pixels of an image
     */
    ImageLerpInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_lerp 
       * @enum {string}
       */
      type?: "img_lerp";
      /**
       * Image 
       * @description The image to lerp
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Min 
       * @description The minimum output value 
       * @default 0
       */
      min?: number;
      /**
       * Max 
       * @description The maximum output value 
       * @default 255
       */
      max?: number;
    };
    /**
     * ImageMetadata 
     * @description An image's generation metadata
     */
    ImageMetadata: {
      /**
       * Metadata 
       * @description The image's core metadata, if it was created in the Linear or Canvas UI
       */
      metadata?: Record<string, never>;
      /**
       * Graph 
       * @description The graph that created the image
       */
      graph?: Record<string, never>;
    };
    /**
     * ImageMultiplyInvocation 
     * @description Multiplies two images together using `PIL.ImageChops.multiply()`.
     */
    ImageMultiplyInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_mul 
       * @enum {string}
       */
      type?: "img_mul";
      /**
       * Image1 
       * @description The first image to multiply
       */
      image1?: components["schemas"]["ImageField"];
      /**
       * Image2 
       * @description The second image to multiply
       */
      image2?: components["schemas"]["ImageField"];
    };
    /**
     * ImageOutput 
     * @description Base class for invocations that output an image
     */
    ImageOutput: {
      /**
       * Type 
       * @default image_output 
       * @enum {string}
       */
      type: "image_output";
      /**
       * Image 
       * @description The output image
       */
      image: components["schemas"]["ImageField"];
      /**
       * Width 
       * @description The width of the image in pixels
       */
      width: number;
      /**
       * Height 
       * @description The height of the image in pixels
       */
      height: number;
    };
    /**
     * ImagePasteInvocation 
     * @description Pastes an image into another image.
     */
    ImagePasteInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_paste 
       * @enum {string}
       */
      type?: "img_paste";
      /**
       * Base Image 
       * @description The base image
       */
      base_image?: components["schemas"]["ImageField"];
      /**
       * Image 
       * @description The image to paste
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Mask 
       * @description The mask to use when pasting
       */
      mask?: components["schemas"]["ImageField"];
      /**
       * X 
       * @description The left x coordinate at which to paste the image 
       * @default 0
       */
      x?: number;
      /**
       * Y 
       * @description The top y coordinate at which to paste the image 
       * @default 0
       */
      y?: number;
    };
    /**
     * ImageProcessorInvocation 
     * @description Base class for invocations that preprocess images for ControlNet
     */
    ImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default image_processor 
       * @enum {string}
       */
      type?: "image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
    };
    /**
     * ImageRecordChanges 
     * @description A set of changes to apply to an image record.
     * 
     * Only limited changes are valid:
     *   - `image_category`: change the category of an image
     *   - `session_id`: change the session associated with an image
     *   - `is_intermediate`: change the image's `is_intermediate` flag
     */
    ImageRecordChanges: {
      /** @description The image's new category. */
      image_category?: components["schemas"]["ImageCategory"];
      /**
       * Session Id 
       * @description The image's new session ID.
       */
      session_id?: string;
      /**
       * Is Intermediate 
       * @description The image's new `is_intermediate` flag.
       */
      is_intermediate?: boolean;
    };
    /**
     * ImageResizeInvocation 
     * @description Resizes an image to specific dimensions
     */
    ImageResizeInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_resize 
       * @enum {string}
       */
      type?: "img_resize";
      /**
       * Image 
       * @description The image to resize
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Width 
       * @description The width to resize to (px)
       */
      width?: number;
      /**
       * Height 
       * @description The height to resize to (px)
       */
      height?: number;
      /**
       * Resample Mode 
       * @description The resampling mode 
       * @default bicubic 
       * @enum {string}
       */
      resample_mode?: "nearest" | "box" | "bilinear" | "hamming" | "bicubic" | "lanczos";
    };
    /**
     * ImageScaleInvocation 
     * @description Scales an image by a factor
     */
    ImageScaleInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default img_scale 
       * @enum {string}
       */
      type?: "img_scale";
      /**
       * Image 
       * @description The image to scale
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Scale Factor 
       * @description The factor by which to scale the image 
       * @default 2
       */
      scale_factor?: number;
      /**
       * Resample Mode 
       * @description The resampling mode 
       * @default bicubic 
       * @enum {string}
       */
      resample_mode?: "nearest" | "box" | "bilinear" | "hamming" | "bicubic" | "lanczos";
    };
    /**
     * ImageToLatentsInvocation 
     * @description Encodes an image into latents.
     */
    ImageToLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default i2l 
       * @enum {string}
       */
      type?: "i2l";
      /**
       * Image 
       * @description The image to encode
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Vae 
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"];
      /**
       * Tiled 
       * @description Encode latents by overlaping tiles(less memory consumption) 
       * @default false
       */
      tiled?: boolean;
      /**
       * Fp32 
       * @description Decode in full precision 
       * @default false
       */
      fp32?: boolean;
    };
    /**
     * ImageUrlsDTO 
     * @description The URLs for an image and its thumbnail.
     */
    ImageUrlsDTO: {
      /**
       * Image Name 
       * @description The unique name of the image.
       */
      image_name: string;
      /**
       * Image Url 
       * @description The URL of the image.
       */
      image_url: string;
      /**
       * Thumbnail Url 
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string;
    };
    /**
     * InfillColorInvocation 
     * @description Infills transparent areas of an image with a solid color
     */
    InfillColorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default infill_rgba 
       * @enum {string}
       */
      type?: "infill_rgba";
      /**
       * Image 
       * @description The image to infill
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Color 
       * @description The color to use to infill 
       * @default {
       *   "r": 127,
       *   "g": 127,
       *   "b": 127,
       *   "a": 255
       * }
       */
      color?: components["schemas"]["ColorField"];
    };
    /**
     * InfillPatchMatchInvocation 
     * @description Infills transparent areas of an image using the PatchMatch algorithm
     */
    InfillPatchMatchInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default infill_patchmatch 
       * @enum {string}
       */
      type?: "infill_patchmatch";
      /**
       * Image 
       * @description The image to infill
       */
      image?: components["schemas"]["ImageField"];
    };
    /**
     * InfillTileInvocation 
     * @description Infills transparent areas of an image with tiles of the image
     */
    InfillTileInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default infill_tile 
       * @enum {string}
       */
      type?: "infill_tile";
      /**
       * Image 
       * @description The image to infill
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Tile Size 
       * @description The tile size (px) 
       * @default 32
       */
      tile_size?: number;
      /**
       * Seed 
       * @description The seed to use for tile generation (omit for random)
       */
      seed?: number;
    };
    /**
     * InpaintInvocation 
     * @description Generates an image using inpaint.
     */
    InpaintInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default inpaint 
       * @enum {string}
       */
      type?: "inpaint";
      /**
       * Positive Conditioning 
       * @description Positive conditioning for generation
       */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Negative Conditioning 
       * @description Negative conditioning for generation
       */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Seed 
       * @description The seed to use (omit for random)
       */
      seed?: number;
      /**
       * Steps 
       * @description The number of steps to use to generate the image 
       * @default 30
       */
      steps?: number;
      /**
       * Width 
       * @description The width of the resulting image 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @description The height of the resulting image 
       * @default 512
       */
      height?: number;
      /**
       * Cfg Scale 
       * @description The Classifier-Free Guidance, higher values may result in a result closer to the prompt 
       * @default 7.5
       */
      cfg_scale?: number;
      /**
       * Scheduler 
       * @description The scheduler to use 
       * @default euler 
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Unet 
       * @description UNet model
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Vae 
       * @description Vae model
       */
      vae?: components["schemas"]["VaeField"];
      /**
       * Image 
       * @description The input image
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Strength 
       * @description The strength of the original image 
       * @default 0.75
       */
      strength?: number;
      /**
       * Fit 
       * @description Whether or not the result should be fit to the aspect ratio of the input image 
       * @default true
       */
      fit?: boolean;
      /**
       * Mask 
       * @description The mask
       */
      mask?: components["schemas"]["ImageField"];
      /**
       * Seam Size 
       * @description The seam inpaint size (px) 
       * @default 96
       */
      seam_size?: number;
      /**
       * Seam Blur 
       * @description The seam inpaint blur radius (px) 
       * @default 16
       */
      seam_blur?: number;
      /**
       * Seam Strength 
       * @description The seam inpaint strength 
       * @default 0.75
       */
      seam_strength?: number;
      /**
       * Seam Steps 
       * @description The number of steps to use for seam inpaint 
       * @default 30
       */
      seam_steps?: number;
      /**
       * Tile Size 
       * @description The tile infill method size (px) 
       * @default 32
       */
      tile_size?: number;
      /**
       * Infill Method 
       * @description The method used to infill empty regions (px) 
       * @default patchmatch 
       * @enum {string}
       */
      infill_method?: "patchmatch" | "tile" | "solid";
      /**
       * Inpaint Width 
       * @description The width of the inpaint region (px)
       */
      inpaint_width?: number;
      /**
       * Inpaint Height 
       * @description The height of the inpaint region (px)
       */
      inpaint_height?: number;
      /**
       * Inpaint Fill 
       * @description The solid infill method color 
       * @default {
       *   "r": 127,
       *   "g": 127,
       *   "b": 127,
       *   "a": 255
       * }
       */
      inpaint_fill?: components["schemas"]["ColorField"];
      /**
       * Inpaint Replace 
       * @description The amount by which to replace masked areas with latent noise 
       * @default 0
       */
      inpaint_replace?: number;
    };
    /**
     * IntCollectionOutput 
     * @description A collection of integers
     */
    IntCollectionOutput: {
      /**
       * Type 
       * @default int_collection 
       * @enum {string}
       */
      type?: "int_collection";
      /**
       * Collection 
       * @description The int collection 
       * @default []
       */
      collection?: (number)[];
    };
    /**
     * IntOutput 
     * @description An integer output
     */
    IntOutput: {
      /**
       * Type 
       * @default int_output 
       * @enum {string}
       */
      type?: "int_output";
      /**
       * A 
       * @description The output integer
       */
      a?: number;
    };
    /**
     * IterateInvocation 
     * @description Iterates over a list of items
     */
    IterateInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default iterate 
       * @enum {string}
       */
      type?: "iterate";
      /**
       * Collection 
       * @description The list of items to iterate over
       */
      collection?: (unknown)[];
      /**
       * Index 
       * @description The index, will be provided on executed iterators 
       * @default 0
       */
      index?: number;
    };
    /**
     * IterateInvocationOutput 
     * @description Used to connect iteration outputs. Will be expanded to a specific output.
     */
    IterateInvocationOutput: {
      /**
       * Type 
       * @default iterate_output 
       * @enum {string}
       */
      type: "iterate_output";
      /**
       * Item 
       * @description The item being iterated over
       */
      item: unknown;
    };
    /**
     * LatentsField 
     * @description A latents field used for passing latents between invocations
     */
    LatentsField: {
      /**
       * Latents Name 
       * @description The name of the latents
       */
      latents_name: string;
    };
    /**
     * LatentsOutput 
     * @description Base class for invocations that output latents
     */
    LatentsOutput: {
      /**
       * Type 
       * @default latents_output 
       * @enum {string}
       */
      type?: "latents_output";
      /**
       * Latents 
       * @description The output latents
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Width 
       * @description The width of the latents in pixels
       */
      width: number;
      /**
       * Height 
       * @description The height of the latents in pixels
       */
      height: number;
    };
    /**
     * LatentsToImageInvocation 
     * @description Generates an image from latents.
     */
    LatentsToImageInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default l2i 
       * @enum {string}
       */
      type?: "l2i";
      /**
       * Latents 
       * @description The latents to generate an image from
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Vae 
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"];
      /**
       * Tiled 
       * @description Decode latents by overlaping tiles(less memory consumption) 
       * @default false
       */
      tiled?: boolean;
      /**
       * Fp32 
       * @description Decode in full precision 
       * @default false
       */
      fp32?: boolean;
      /**
       * Metadata 
       * @description Optional core metadata to be written to the image
       */
      metadata?: components["schemas"]["CoreMetadata"];
    };
    /**
     * LatentsToLatentsInvocation 
     * @description Generates latents using latents as base image.
     */
    LatentsToLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default l2l 
       * @enum {string}
       */
      type?: "l2l";
      /**
       * Positive Conditioning 
       * @description Positive conditioning for generation
       */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Negative Conditioning 
       * @description Negative conditioning for generation
       */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Noise 
       * @description The noise to use
       */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Steps 
       * @description The number of steps to use to generate the image 
       * @default 10
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @description The Classifier-Free Guidance, higher values may result in a result closer to the prompt 
       * @default 7.5
       */
      cfg_scale?: number | (number)[];
      /**
       * Scheduler 
       * @description The scheduler to use 
       * @default euler 
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Control 
       * @description The control to use
       */
      control?: components["schemas"]["ControlField"] | (components["schemas"]["ControlField"])[];
      /**
       * Latents 
       * @description The latents to use as a base image
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Strength 
       * @description The strength of the latents to use 
       * @default 0.7
       */
      strength?: number;
    };
    /**
     * LeresImageProcessorInvocation 
     * @description Applies leres processing to image
     */
    LeresImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default leres_image_processor 
       * @enum {string}
       */
      type?: "leres_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Thr A 
       * @description Leres parameter `thr_a` 
       * @default 0
       */
      thr_a?: number;
      /**
       * Thr B 
       * @description Leres parameter `thr_b` 
       * @default 0
       */
      thr_b?: number;
      /**
       * Boost 
       * @description Whether to use boost mode 
       * @default false
       */
      boost?: boolean;
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
    };
    /**
     * LineartAnimeImageProcessorInvocation 
     * @description Applies line art anime processing to image
     */
    LineartAnimeImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default lineart_anime_image_processor 
       * @enum {string}
       */
      type?: "lineart_anime_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
    };
    /**
     * LineartImageProcessorInvocation 
     * @description Applies line art processing to image
     */
    LineartImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default lineart_image_processor 
       * @enum {string}
       */
      type?: "lineart_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
      /**
       * Coarse 
       * @description Whether to use coarse mode 
       * @default false
       */
      coarse?: boolean;
    };
    /**
     * LoRAMetadataField 
     * @description LoRA metadata for an image generated in InvokeAI.
     */
    LoRAMetadataField: {
      /**
       * Lora 
       * @description The LoRA model
       */
      lora: components["schemas"]["LoRAModelField"];
      /**
       * Weight 
       * @description The weight of the LoRA model
       */
      weight: number;
    };
    /** LoRAModelConfig */
    LoRAModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "lora";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      model_format: components["schemas"]["LoRAModelFormat"];
      error?: components["schemas"]["ModelError"];
    };
    /**
     * LoRAModelField 
     * @description LoRA model field
     */
    LoRAModelField: {
      /**
       * Model Name 
       * @description Name of the LoRA model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * LoRAModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    LoRAModelFormat: "lycoris" | "diffusers";
    /**
     * LoadImageInvocation 
     * @description Load an image and provide it as output.
     */
    LoadImageInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default load_image 
       * @enum {string}
       */
      type?: "load_image";
      /**
       * Image 
       * @description The image to load
       */
      image?: components["schemas"]["ImageField"];
    };
    /** LoraInfo */
    LoraInfo: {
      /**
       * Model Name 
       * @description Info to load submodel
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"];
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"];
      /**
       * Weight 
       * @description Lora's weight which to use when apply to model
       */
      weight: number;
    };
    /**
     * LoraLoaderInvocation 
     * @description Apply selected lora to unet and text_encoder.
     */
    LoraLoaderInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default lora_loader 
       * @enum {string}
       */
      type?: "lora_loader";
      /**
       * Lora 
       * @description Lora model name
       */
      lora?: components["schemas"]["LoRAModelField"];
      /**
       * Weight 
       * @description With what weight to apply lora 
       * @default 0.75
       */
      weight?: number;
      /**
       * Unet 
       * @description UNet model for applying lora
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Clip 
       * @description Clip model for applying lora
       */
      clip?: components["schemas"]["ClipField"];
    };
    /**
     * LoraLoaderOutput 
     * @description Model loader output
     */
    LoraLoaderOutput: {
      /**
       * Type 
       * @default lora_loader_output 
       * @enum {string}
       */
      type?: "lora_loader_output";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Clip 
       * @description Tokenizer and text_encoder submodels
       */
      clip?: components["schemas"]["ClipField"];
    };
    /**
     * MainModelField 
     * @description Main model field
     */
    MainModelField: {
      /**
       * Model Name 
       * @description Name of the model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /**
     * MainModelLoaderInvocation 
     * @description Loads a main model, outputting its submodels.
     */
    MainModelLoaderInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default main_model_loader 
       * @enum {string}
       */
      type?: "main_model_loader";
      /**
       * Model 
       * @description The model to load
       */
      model: components["schemas"]["MainModelField"];
    };
    /**
     * MaskFromAlphaInvocation 
     * @description Extracts the alpha channel of an image as a mask.
     */
    MaskFromAlphaInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default tomask 
       * @enum {string}
       */
      type?: "tomask";
      /**
       * Image 
       * @description The image to create the mask from
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Invert 
       * @description Whether or not to invert the mask 
       * @default false
       */
      invert?: boolean;
    };
    /**
     * MaskOutput 
     * @description Base class for invocations that output a mask
     */
    MaskOutput: {
      /**
       * Type 
       * @default mask 
       * @enum {string}
       */
      type: "mask";
      /**
       * Mask 
       * @description The output mask
       */
      mask: components["schemas"]["ImageField"];
      /**
       * Width 
       * @description The width of the mask in pixels
       */
      width?: number;
      /**
       * Height 
       * @description The height of the mask in pixels
       */
      height?: number;
    };
    /**
     * MediapipeFaceProcessorInvocation 
     * @description Applies mediapipe face processing to image
     */
    MediapipeFaceProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default mediapipe_face_processor 
       * @enum {string}
       */
      type?: "mediapipe_face_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Max Faces 
       * @description Maximum number of faces to detect 
       * @default 1
       */
      max_faces?: number;
      /**
       * Min Confidence 
       * @description Minimum confidence for face detection 
       * @default 0.5
       */
      min_confidence?: number;
    };
    /**
     * MergeInterpolationMethod 
     * @description An enumeration. 
     * @enum {string}
     */
    MergeInterpolationMethod: "weighted_sum" | "sigmoid" | "inv_sigmoid" | "add_difference";
    /**
     * MetadataAccumulatorInvocation 
     * @description Outputs a Core Metadata Object
     */
    MetadataAccumulatorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default metadata_accumulator 
       * @enum {string}
       */
      type?: "metadata_accumulator";
      /**
       * Generation Mode 
       * @description The generation mode that output this image
       */
      generation_mode: string;
      /**
       * Positive Prompt 
       * @description The positive prompt parameter
       */
      positive_prompt: string;
      /**
       * Negative Prompt 
       * @description The negative prompt parameter
       */
      negative_prompt: string;
      /**
       * Width 
       * @description The width parameter
       */
      width: number;
      /**
       * Height 
       * @description The height parameter
       */
      height: number;
      /**
       * Seed 
       * @description The seed used for noise generation
       */
      seed: number;
      /**
       * Rand Device 
       * @description The device used for random number generation
       */
      rand_device: string;
      /**
       * Cfg Scale 
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale: number;
      /**
       * Steps 
       * @description The number of steps used for inference
       */
      steps: number;
      /**
       * Scheduler 
       * @description The scheduler used for inference
       */
      scheduler: string;
      /**
       * Clip Skip 
       * @description The number of skipped CLIP layers
       */
      clip_skip: number;
      /**
       * Model 
       * @description The main model used for inference
       */
      model: components["schemas"]["MainModelField"];
      /**
       * Controlnets 
       * @description The ControlNets used for inference
       */
      controlnets: (components["schemas"]["ControlField"])[];
      /**
       * Loras 
       * @description The LoRAs used for inference
       */
      loras: (components["schemas"]["LoRAMetadataField"])[];
      /**
       * Strength 
       * @description The strength used for latents-to-latents
       */
      strength?: number;
      /**
       * Init Image 
       * @description The name of the initial image
       */
      init_image?: string;
      /**
       * Vae 
       * @description The VAE used for decoding, if the main model's default was not used
       */
      vae?: components["schemas"]["VAEModelField"];
    };
    /**
     * MetadataAccumulatorOutput 
     * @description The output of the MetadataAccumulator node
     */
    MetadataAccumulatorOutput: {
      /**
       * Type 
       * @default metadata_accumulator_output 
       * @enum {string}
       */
      type?: "metadata_accumulator_output";
      /**
       * Metadata 
       * @description The core metadata for the image
       */
      metadata: components["schemas"]["CoreMetadata"];
    };
    /**
     * MidasDepthImageProcessorInvocation 
     * @description Applies Midas depth processing to image
     */
    MidasDepthImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default midas_depth_image_processor 
       * @enum {string}
       */
      type?: "midas_depth_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * A Mult 
       * @description Midas parameter `a_mult` (a = a_mult * PI) 
       * @default 2
       */
      a_mult?: number;
      /**
       * Bg Th 
       * @description Midas parameter `bg_th` 
       * @default 0.1
       */
      bg_th?: number;
    };
    /**
     * MlsdImageProcessorInvocation 
     * @description Applies MLSD processing to image
     */
    MlsdImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default mlsd_image_processor 
       * @enum {string}
       */
      type?: "mlsd_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
      /**
       * Thr V 
       * @description MLSD parameter `thr_v` 
       * @default 0.1
       */
      thr_v?: number;
      /**
       * Thr D 
       * @description MLSD parameter `thr_d` 
       * @default 0.1
       */
      thr_d?: number;
    };
    /**
     * ModelError 
     * @description An enumeration. 
     * @enum {string}
     */
    ModelError: "not_found";
    /** ModelInfo */
    ModelInfo: {
      /**
       * Model Name 
       * @description Info to load submodel
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"];
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"];
    };
    /**
     * ModelLoaderOutput 
     * @description Model loader output
     */
    ModelLoaderOutput: {
      /**
       * Type 
       * @default model_loader_output 
       * @enum {string}
       */
      type?: "model_loader_output";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Clip 
       * @description Tokenizer and text_encoder submodels
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Vae 
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"];
    };
    /**
     * ModelType 
     * @description An enumeration. 
     * @enum {string}
     */
    ModelType: "main" | "vae" | "lora" | "controlnet" | "embedding";
    /**
     * ModelVariantType 
     * @description An enumeration. 
     * @enum {string}
     */
    ModelVariantType: "normal" | "inpaint" | "depth";
    /** ModelsList */
    ModelsList: {
      /** Models */
      models: (components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"])[];
    };
    /**
     * MultiplyInvocation 
     * @description Multiplies two numbers
     */
    MultiplyInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default mul 
       * @enum {string}
       */
      type?: "mul";
      /**
       * A 
       * @description The first number 
       * @default 0
       */
      a?: number;
      /**
       * B 
       * @description The second number 
       * @default 0
       */
      b?: number;
    };
    /**
     * NoiseInvocation 
     * @description Generates latent noise.
     */
    NoiseInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default noise 
       * @enum {string}
       */
      type?: "noise";
      /**
       * Seed 
       * @description The seed to use
       */
      seed?: number;
      /**
       * Width 
       * @description The width of the resulting noise 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @description The height of the resulting noise 
       * @default 512
       */
      height?: number;
      /**
       * Use Cpu 
       * @description Use CPU for noise generation (for reproducible results across platforms) 
       * @default true
       */
      use_cpu?: boolean;
    };
    /**
     * NoiseOutput 
     * @description Invocation noise output
     */
    NoiseOutput: {
      /**
       * Type 
       * @default noise_output 
       * @enum {string}
       */
      type?: "noise_output";
      /**
       * Noise 
       * @description The output noise
       */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Width 
       * @description The width of the noise in pixels
       */
      width: number;
      /**
       * Height 
       * @description The height of the noise in pixels
       */
      height: number;
    };
    /**
     * NormalbaeImageProcessorInvocation 
     * @description Applies NormalBae processing to image
     */
    NormalbaeImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default normalbae_image_processor 
       * @enum {string}
       */
      type?: "normalbae_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
    };
    /**
     * OffsetPaginatedResults[BoardDTO] 
     * @description Offset-paginated results
     */
    OffsetPaginatedResults_BoardDTO_: {
      /**
       * Items 
       * @description Items
       */
      items: (components["schemas"]["BoardDTO"])[];
      /**
       * Offset 
       * @description Offset from which to retrieve items
       */
      offset: number;
      /**
       * Limit 
       * @description Limit of items to get
       */
      limit: number;
      /**
       * Total 
       * @description Total number of items in result
       */
      total: number;
    };
    /**
     * OffsetPaginatedResults[ImageDTO] 
     * @description Offset-paginated results
     */
    OffsetPaginatedResults_ImageDTO_: {
      /**
       * Items 
       * @description Items
       */
      items: (components["schemas"]["ImageDTO"])[];
      /**
       * Offset 
       * @description Offset from which to retrieve items
       */
      offset: number;
      /**
       * Limit 
       * @description Limit of items to get
       */
      limit: number;
      /**
       * Total 
       * @description Total number of items in result
       */
      total: number;
    };
    /**
     * OpenposeImageProcessorInvocation 
     * @description Applies Openpose processing to image
     */
    OpenposeImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default openpose_image_processor 
       * @enum {string}
       */
      type?: "openpose_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Hand And Face 
       * @description Whether to use hands and face mode 
       * @default false
       */
      hand_and_face?: boolean;
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
    };
    /**
     * PaginatedResults[GraphExecutionState] 
     * @description Paginated results
     */
    PaginatedResults_GraphExecutionState_: {
      /**
       * Items 
       * @description Items
       */
      items: (components["schemas"]["GraphExecutionState"])[];
      /**
       * Page 
       * @description Current Page
       */
      page: number;
      /**
       * Pages 
       * @description Total number of pages
       */
      pages: number;
      /**
       * Per Page 
       * @description Number of items per page
       */
      per_page: number;
      /**
       * Total 
       * @description Total number of items in result
       */
      total: number;
    };
    /**
     * ParamFloatInvocation 
     * @description A float parameter
     */
    ParamFloatInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default param_float 
       * @enum {string}
       */
      type?: "param_float";
      /**
       * Param 
       * @description The float value 
       * @default 0
       */
      param?: number;
    };
    /**
     * ParamIntInvocation 
     * @description An integer parameter
     */
    ParamIntInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default param_int 
       * @enum {string}
       */
      type?: "param_int";
      /**
       * A 
       * @description The integer value 
       * @default 0
       */
      a?: number;
    };
    /**
     * ParamStringInvocation 
     * @description A string parameter
     */
    ParamStringInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default param_string 
       * @enum {string}
       */
      type?: "param_string";
      /**
       * Text 
       * @description The string value 
       * @default
       */
      text?: string;
    };
    /**
     * PidiImageProcessorInvocation 
     * @description Applies PIDI processing to image
     */
    PidiImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default pidi_image_processor 
       * @enum {string}
       */
      type?: "pidi_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Detect Resolution 
       * @description The pixel resolution for detection 
       * @default 512
       */
      detect_resolution?: number;
      /**
       * Image Resolution 
       * @description The pixel resolution for the output image 
       * @default 512
       */
      image_resolution?: number;
      /**
       * Safe 
       * @description Whether to use safe mode 
       * @default false
       */
      safe?: boolean;
      /**
       * Scribble 
       * @description Whether to use scribble mode 
       * @default false
       */
      scribble?: boolean;
    };
    /**
     * PromptCollectionOutput 
     * @description Base class for invocations that output a collection of prompts
     */
    PromptCollectionOutput: {
      /**
       * Type 
       * @default prompt_collection_output 
       * @enum {string}
       */
      type: "prompt_collection_output";
      /**
       * Prompt Collection 
       * @description The output prompt collection
       */
      prompt_collection: (string)[];
      /**
       * Count 
       * @description The size of the prompt collection
       */
      count: number;
    };
    /**
     * PromptOutput 
     * @description Base class for invocations that output a prompt
     */
    PromptOutput: {
      /**
       * Type 
       * @default prompt 
       * @enum {string}
       */
      type: "prompt";
      /**
       * Prompt 
       * @description The output prompt
       */
      prompt: string;
    };
    /**
     * PromptsFromFileInvocation 
     * @description Loads prompts from a text file
     */
    PromptsFromFileInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default prompt_from_file 
       * @enum {string}
       */
      type?: "prompt_from_file";
      /**
       * File Path 
       * @description Path to prompt text file
       */
      file_path: string;
      /**
       * Pre Prompt 
       * @description String to prepend to each prompt
       */
      pre_prompt?: string;
      /**
       * Post Prompt 
       * @description String to append to each prompt
       */
      post_prompt?: string;
      /**
       * Start Line 
       * @description Line in the file to start start from 
       * @default 1
       */
      start_line?: number;
      /**
       * Max Prompts 
       * @description Max lines to read from file (0=all) 
       * @default 1
       */
      max_prompts?: number;
    };
    /**
     * RandomIntInvocation 
     * @description Outputs a single random integer.
     */
    RandomIntInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default rand_int 
       * @enum {string}
       */
      type?: "rand_int";
      /**
       * Low 
       * @description The inclusive low value 
       * @default 0
       */
      low?: number;
      /**
       * High 
       * @description The exclusive high value 
       * @default 2147483647
       */
      high?: number;
    };
    /**
     * RandomRangeInvocation 
     * @description Creates a collection of random numbers
     */
    RandomRangeInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default random_range 
       * @enum {string}
       */
      type?: "random_range";
      /**
       * Low 
       * @description The inclusive low value 
       * @default 0
       */
      low?: number;
      /**
       * High 
       * @description The exclusive high value 
       * @default 2147483647
       */
      high?: number;
      /**
       * Size 
       * @description The number of values to generate 
       * @default 1
       */
      size?: number;
      /**
       * Seed 
       * @description The seed for the RNG (omit for random)
       */
      seed?: number;
    };
    /**
     * RangeInvocation 
     * @description Creates a range of numbers from start to stop with step
     */
    RangeInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default range 
       * @enum {string}
       */
      type?: "range";
      /**
       * Start 
       * @description The start of the range 
       * @default 0
       */
      start?: number;
      /**
       * Stop 
       * @description The stop of the range 
       * @default 10
       */
      stop?: number;
      /**
       * Step 
       * @description The step of the range 
       * @default 1
       */
      step?: number;
    };
    /**
     * RangeOfSizeInvocation 
     * @description Creates a range from start to start + size with step
     */
    RangeOfSizeInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default range_of_size 
       * @enum {string}
       */
      type?: "range_of_size";
      /**
       * Start 
       * @description The start of the range 
       * @default 0
       */
      start?: number;
      /**
       * Size 
       * @description The number of values 
       * @default 1
       */
      size?: number;
      /**
       * Step 
       * @description The step of the range 
       * @default 1
       */
      step?: number;
    };
    /**
     * ResizeLatentsInvocation 
     * @description Resizes latents to explicit width/height (in pixels). Provided dimensions are floor-divided by 8.
     */
    ResizeLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default lresize 
       * @enum {string}
       */
      type?: "lresize";
      /**
       * Latents 
       * @description The latents to resize
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Width 
       * @description The width to resize to (px) 
       * @default 512
       */
      width?: number;
      /**
       * Height 
       * @description The height to resize to (px) 
       * @default 512
       */
      height?: number;
      /**
       * Mode 
       * @description The interpolation mode 
       * @default bilinear 
       * @enum {string}
       */
      mode?: "nearest" | "linear" | "bilinear" | "bicubic" | "trilinear" | "area" | "nearest-exact";
      /**
       * Antialias 
       * @description Whether or not to antialias (applied in bilinear and bicubic modes only) 
       * @default false
       */
      antialias?: boolean;
    };
    /**
     * ResourceOrigin 
     * @description The origin of a resource (eg image).
     * 
     * - INTERNAL: The resource was created by the application.
     * - EXTERNAL: The resource was not created by the application.
     * This may be a user-initiated upload, or an internal application upload (eg Canvas init image). 
     * @enum {string}
     */
    ResourceOrigin: "internal" | "external";
    /**
     * SDXLCompelPromptInvocation 
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLCompelPromptInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_compel_prompt 
       * @enum {string}
       */
      type?: "sdxl_compel_prompt";
      /**
       * Prompt 
       * @description Prompt 
       * @default
       */
      prompt?: string;
      /**
       * Style 
       * @description Style prompt 
       * @default
       */
      style?: string;
      /**
       * Original Width 
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height 
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top 
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left 
       * @default 0
       */
      crop_left?: number;
      /**
       * Target Width 
       * @default 1024
       */
      target_width?: number;
      /**
       * Target Height 
       * @default 1024
       */
      target_height?: number;
      /**
       * Clip 
       * @description Clip to use
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Clip2 
       * @description Clip2 to use
       */
      clip2?: components["schemas"]["ClipField"];
    };
    /**
     * SDXLLatentsToLatentsInvocation 
     * @description Generates latents from conditionings.
     */
    SDXLLatentsToLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default l2l_sdxl 
       * @enum {string}
       */
      type?: "l2l_sdxl";
      /**
       * Positive Conditioning 
       * @description Positive conditioning for generation
       */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Negative Conditioning 
       * @description Negative conditioning for generation
       */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Noise 
       * @description The noise to use
       */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Steps 
       * @description The number of steps to use to generate the image 
       * @default 10
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @description The Classifier-Free Guidance, higher values may result in a result closer to the prompt 
       * @default 7.5
       */
      cfg_scale?: number | (number)[];
      /**
       * Scheduler 
       * @description The scheduler to use 
       * @default euler 
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Latents 
       * @description Initial latents
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Denoising Start 
       * @default 0
       */
      denoising_start?: number;
      /**
       * Denoising End 
       * @default 1
       */
      denoising_end?: number;
    };
    /**
     * SDXLModelLoaderInvocation 
     * @description Loads an sdxl base model, outputting its submodels.
     */
    SDXLModelLoaderInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_model_loader 
       * @enum {string}
       */
      type?: "sdxl_model_loader";
      /**
       * Model 
       * @description The model to load
       */
      model: components["schemas"]["MainModelField"];
    };
    /**
     * SDXLModelLoaderOutput 
     * @description SDXL base model loader output
     */
    SDXLModelLoaderOutput: {
      /**
       * Type 
       * @default sdxl_model_loader_output 
       * @enum {string}
       */
      type?: "sdxl_model_loader_output";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Clip 
       * @description Tokenizer and text_encoder submodels
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Clip2 
       * @description Tokenizer and text_encoder submodels
       */
      clip2?: components["schemas"]["ClipField"];
      /**
       * Vae 
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"];
    };
    /**
     * SDXLRawPromptInvocation 
     * @description Pass unmodified prompt to conditioning without compel processing.
     */
    SDXLRawPromptInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_raw_prompt 
       * @enum {string}
       */
      type?: "sdxl_raw_prompt";
      /**
       * Prompt 
       * @description Prompt 
       * @default
       */
      prompt?: string;
      /**
       * Style 
       * @description Style prompt 
       * @default
       */
      style?: string;
      /**
       * Original Width 
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height 
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top 
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left 
       * @default 0
       */
      crop_left?: number;
      /**
       * Target Width 
       * @default 1024
       */
      target_width?: number;
      /**
       * Target Height 
       * @default 1024
       */
      target_height?: number;
      /**
       * Clip 
       * @description Clip to use
       */
      clip?: components["schemas"]["ClipField"];
      /**
       * Clip2 
       * @description Clip2 to use
       */
      clip2?: components["schemas"]["ClipField"];
    };
    /**
     * SDXLRefinerCompelPromptInvocation 
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLRefinerCompelPromptInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_refiner_compel_prompt 
       * @enum {string}
       */
      type?: "sdxl_refiner_compel_prompt";
      /**
       * Style 
       * @description Style prompt 
       * @default
       */
      style?: string;
      /**
       * Original Width 
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height 
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top 
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left 
       * @default 0
       */
      crop_left?: number;
      /**
       * Aesthetic Score 
       * @default 6
       */
      aesthetic_score?: number;
      /**
       * Clip2 
       * @description Clip to use
       */
      clip2?: components["schemas"]["ClipField"];
    };
    /**
     * SDXLRefinerModelLoaderInvocation 
     * @description Loads an sdxl refiner model, outputting its submodels.
     */
    SDXLRefinerModelLoaderInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_refiner_model_loader 
       * @enum {string}
       */
      type?: "sdxl_refiner_model_loader";
      /**
       * Model 
       * @description The model to load
       */
      model: components["schemas"]["MainModelField"];
    };
    /**
     * SDXLRefinerModelLoaderOutput 
     * @description SDXL refiner model loader output
     */
    SDXLRefinerModelLoaderOutput: {
      /**
       * Type 
       * @default sdxl_refiner_model_loader_output 
       * @enum {string}
       */
      type?: "sdxl_refiner_model_loader_output";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Clip2 
       * @description Tokenizer and text_encoder submodels
       */
      clip2?: components["schemas"]["ClipField"];
      /**
       * Vae 
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"];
    };
    /**
     * SDXLRefinerRawPromptInvocation 
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLRefinerRawPromptInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sdxl_refiner_raw_prompt 
       * @enum {string}
       */
      type?: "sdxl_refiner_raw_prompt";
      /**
       * Style 
       * @description Style prompt 
       * @default
       */
      style?: string;
      /**
       * Original Width 
       * @default 1024
       */
      original_width?: number;
      /**
       * Original Height 
       * @default 1024
       */
      original_height?: number;
      /**
       * Crop Top 
       * @default 0
       */
      crop_top?: number;
      /**
       * Crop Left 
       * @default 0
       */
      crop_left?: number;
      /**
       * Aesthetic Score 
       * @default 6
       */
      aesthetic_score?: number;
      /**
       * Clip2 
       * @description Clip to use
       */
      clip2?: components["schemas"]["ClipField"];
    };
    /**
     * SDXLTextToLatentsInvocation 
     * @description Generates latents from conditionings.
     */
    SDXLTextToLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default t2l_sdxl 
       * @enum {string}
       */
      type?: "t2l_sdxl";
      /**
       * Positive Conditioning 
       * @description Positive conditioning for generation
       */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Negative Conditioning 
       * @description Negative conditioning for generation
       */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Noise 
       * @description The noise to use
       */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Steps 
       * @description The number of steps to use to generate the image 
       * @default 10
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @description The Classifier-Free Guidance, higher values may result in a result closer to the prompt 
       * @default 7.5
       */
      cfg_scale?: number | (number)[];
      /**
       * Scheduler 
       * @description The scheduler to use 
       * @default euler 
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Denoising End 
       * @default 1
       */
      denoising_end?: number;
    };
    /**
     * ScaleLatentsInvocation 
     * @description Scales latents by a given factor.
     */
    ScaleLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default lscale 
       * @enum {string}
       */
      type?: "lscale";
      /**
       * Latents 
       * @description The latents to scale
       */
      latents?: components["schemas"]["LatentsField"];
      /**
       * Scale Factor 
       * @description The factor by which to scale the latents
       */
      scale_factor: number;
      /**
       * Mode 
       * @description The interpolation mode 
       * @default bilinear 
       * @enum {string}
       */
      mode?: "nearest" | "linear" | "bilinear" | "bicubic" | "trilinear" | "area" | "nearest-exact";
      /**
       * Antialias 
       * @description Whether or not to antialias (applied in bilinear and bicubic modes only) 
       * @default false
       */
      antialias?: boolean;
    };
    /**
     * SegmentAnythingProcessorInvocation 
     * @description Applies segment anything processing to image
     */
    SegmentAnythingProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default segment_anything_processor 
       * @enum {string}
       */
      type?: "segment_anything_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
    };
    /**
     * ShowImageInvocation 
     * @description Displays a provided image, and passes it forward in the pipeline.
     */
    ShowImageInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default show_image 
       * @enum {string}
       */
      type?: "show_image";
      /**
       * Image 
       * @description The image to show
       */
      image?: components["schemas"]["ImageField"];
    };
    /** StableDiffusion1ModelCheckpointConfig */
    StableDiffusion1ModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion1ModelDiffusersConfig */
    StableDiffusion1ModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion2ModelCheckpointConfig */
    StableDiffusion2ModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusion2ModelDiffusersConfig */
    StableDiffusion2ModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusionXLModelCheckpointConfig */
    StableDiffusionXLModelCheckpointConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "checkpoint";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      /** Config */
      config: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /** StableDiffusionXLModelDiffusersConfig */
    StableDiffusionXLModelDiffusersConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "main";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /**
       * Model Format 
       * @enum {string}
       */
      model_format: "diffusers";
      error?: components["schemas"]["ModelError"];
      /** Vae */
      vae?: string;
      variant: components["schemas"]["ModelVariantType"];
    };
    /**
     * StepParamEasingInvocation 
     * @description Experimental per-step parameter easing for denoising steps
     */
    StepParamEasingInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default step_param_easing 
       * @enum {string}
       */
      type?: "step_param_easing";
      /**
       * Easing 
       * @description The easing function to use 
       * @default Linear 
       * @enum {string}
       */
      easing?: "Linear" | "QuadIn" | "QuadOut" | "QuadInOut" | "CubicIn" | "CubicOut" | "CubicInOut" | "QuarticIn" | "QuarticOut" | "QuarticInOut" | "QuinticIn" | "QuinticOut" | "QuinticInOut" | "SineIn" | "SineOut" | "SineInOut" | "CircularIn" | "CircularOut" | "CircularInOut" | "ExponentialIn" | "ExponentialOut" | "ExponentialInOut" | "ElasticIn" | "ElasticOut" | "ElasticInOut" | "BackIn" | "BackOut" | "BackInOut" | "BounceIn" | "BounceOut" | "BounceInOut";
      /**
       * Num Steps 
       * @description number of denoising steps 
       * @default 20
       */
      num_steps?: number;
      /**
       * Start Value 
       * @description easing starting value 
       * @default 0
       */
      start_value?: number;
      /**
       * End Value 
       * @description easing ending value 
       * @default 1
       */
      end_value?: number;
      /**
       * Start Step Percent 
       * @description fraction of steps at which to start easing 
       * @default 0
       */
      start_step_percent?: number;
      /**
       * End Step Percent 
       * @description fraction of steps after which to end easing 
       * @default 1
       */
      end_step_percent?: number;
      /**
       * Pre Start Value 
       * @description value before easing start
       */
      pre_start_value?: number;
      /**
       * Post End Value 
       * @description value after easing end
       */
      post_end_value?: number;
      /**
       * Mirror 
       * @description include mirror of easing function 
       * @default false
       */
      mirror?: boolean;
      /**
       * Show Easing Plot 
       * @description show easing plot 
       * @default false
       */
      show_easing_plot?: boolean;
    };
    /**
     * StringOutput 
     * @description A string output
     */
    StringOutput: {
      /**
       * Type 
       * @default string_output 
       * @enum {string}
       */
      type?: "string_output";
      /**
       * Text 
       * @description The output string
       */
      text?: string;
    };
    /**
     * SubModelType 
     * @description An enumeration. 
     * @enum {string}
     */
    SubModelType: "unet" | "text_encoder" | "text_encoder_2" | "tokenizer" | "tokenizer_2" | "vae" | "scheduler" | "safety_checker";
    /**
     * SubtractInvocation 
     * @description Subtracts two numbers
     */
    SubtractInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default sub 
       * @enum {string}
       */
      type?: "sub";
      /**
       * A 
       * @description The first number 
       * @default 0
       */
      a?: number;
      /**
       * B 
       * @description The second number 
       * @default 0
       */
      b?: number;
    };
    /**
     * TextToLatentsInvocation 
     * @description Generates latents from conditionings.
     */
    TextToLatentsInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default t2l 
       * @enum {string}
       */
      type?: "t2l";
      /**
       * Positive Conditioning 
       * @description Positive conditioning for generation
       */
      positive_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Negative Conditioning 
       * @description Negative conditioning for generation
       */
      negative_conditioning?: components["schemas"]["ConditioningField"];
      /**
       * Noise 
       * @description The noise to use
       */
      noise?: components["schemas"]["LatentsField"];
      /**
       * Steps 
       * @description The number of steps to use to generate the image 
       * @default 10
       */
      steps?: number;
      /**
       * Cfg Scale 
       * @description The Classifier-Free Guidance, higher values may result in a result closer to the prompt 
       * @default 7.5
       */
      cfg_scale?: number | (number)[];
      /**
       * Scheduler 
       * @description The scheduler to use 
       * @default euler 
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "lms" | "lms_k" | "pndm" | "heun" | "heun_k" | "euler" | "euler_k" | "euler_a" | "kdpm_2" | "kdpm_2_a" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_sde" | "dpmpp_sde_k" | "unipc";
      /**
       * Unet 
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"];
      /**
       * Control 
       * @description The control to use
       */
      control?: components["schemas"]["ControlField"] | (components["schemas"]["ControlField"])[];
    };
    /** TextualInversionModelConfig */
    TextualInversionModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "embedding";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      /** Model Format */
      model_format: null;
      error?: components["schemas"]["ModelError"];
    };
    /**
     * TileResamplerProcessorInvocation 
     * @description Base class for invocations that preprocess images for ControlNet
     */
    TileResamplerProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default tile_image_processor 
       * @enum {string}
       */
      type?: "tile_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
      /**
       * Down Sampling Rate 
       * @description Down sampling rate 
       * @default 1
       */
      down_sampling_rate?: number;
    };
    /** UNetField */
    UNetField: {
      /**
       * Unet 
       * @description Info to load unet submodel
       */
      unet: components["schemas"]["ModelInfo"];
      /**
       * Scheduler 
       * @description Info to load scheduler submodel
       */
      scheduler: components["schemas"]["ModelInfo"];
      /**
       * Loras 
       * @description Loras to apply on model loading
       */
      loras: (components["schemas"]["LoraInfo"])[];
    };
    /**
     * VAEModelField 
     * @description Vae model field
     */
    VAEModelField: {
      /**
       * Model Name 
       * @description Name of the model
       */
      model_name: string;
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"];
    };
    /** VaeField */
    VaeField: {
      /**
       * Vae 
       * @description Info to load vae submodel
       */
      vae: components["schemas"]["ModelInfo"];
    };
    /**
     * VaeLoaderInvocation 
     * @description Loads a VAE model, outputting a VaeLoaderOutput
     */
    VaeLoaderInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default vae_loader 
       * @enum {string}
       */
      type?: "vae_loader";
      /**
       * Vae Model 
       * @description The VAE to load
       */
      vae_model: components["schemas"]["VAEModelField"];
    };
    /**
     * VaeLoaderOutput 
     * @description Model loader output
     */
    VaeLoaderOutput: {
      /**
       * Type 
       * @default vae_loader_output 
       * @enum {string}
       */
      type?: "vae_loader_output";
      /**
       * Vae 
       * @description Vae model
       */
      vae?: components["schemas"]["VaeField"];
    };
    /** VaeModelConfig */
    VaeModelConfig: {
      /** Model Name */
      model_name: string;
      base_model: components["schemas"]["BaseModelType"];
      /**
       * Model Type 
       * @enum {string}
       */
      model_type: "vae";
      /** Path */
      path: string;
      /** Description */
      description?: string;
      model_format: components["schemas"]["VaeModelFormat"];
      error?: components["schemas"]["ModelError"];
    };
    /**
     * VaeModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    VaeModelFormat: "checkpoint" | "diffusers";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * ZoeDepthImageProcessorInvocation 
     * @description Applies Zoe depth processing to image
     */
    ZoeDepthImageProcessorInvocation: {
      /**
       * Id 
       * @description The id of this node. Must be unique among all nodes.
       */
      id: string;
      /**
       * Is Intermediate 
       * @description Whether or not this node is an intermediate node. 
       * @default false
       */
      is_intermediate?: boolean;
      /**
       * Type 
       * @default zoe_depth_image_processor 
       * @enum {string}
       */
      type?: "zoe_depth_image_processor";
      /**
       * Image 
       * @description The image to process
       */
      image?: components["schemas"]["ImageField"];
    };
    /**
     * StableDiffusion2ModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    StableDiffusion2ModelFormat: "checkpoint" | "diffusers";
    /**
     * StableDiffusionXLModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    StableDiffusionXLModelFormat: "checkpoint" | "diffusers";
    /**
     * StableDiffusion1ModelFormat 
     * @description An enumeration. 
     * @enum {string}
     */
    StableDiffusion1ModelFormat: "checkpoint" | "diffusers";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {

  /**
   * List Sessions 
   * @description Gets a list of sessions, optionally searching
   */
  list_sessions: {
    parameters: {
      query?: {
        /** @description The page of results to get */
        page?: number;
        /** @description The number of results per page */
        per_page?: number;
        /** @description The query string to search for */
        query?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResults_GraphExecutionState_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Session 
   * @description Creates a new session, optionally initializing it with an invocation graph
   */
  create_session: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Graph"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Invalid json */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Session 
   * @description Gets a session
   */
  get_session: {
    parameters: {
      path: {
        /** @description The id of the session to get */
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Node 
   * @description Adds a node to the graph
   */
  add_node: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoadImageInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRawPromptInvocation"] | components["schemas"]["SDXLRefinerRawPromptInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["TextToLatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["InpaintInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["ParamIntInvocation"] | components["schemas"]["ParamFloatInvocation"] | components["schemas"]["ParamStringInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SDXLTextToLatentsInvocation"] | components["schemas"]["SDXLLatentsToLatentsInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["LatentsToLatentsInvocation"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Invalid node or link */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Node 
   * @description Updates a node in the graph and removes all linked edges
   */
  update_node: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string;
        /** @description The path to the node in the graph */
        node_path: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoadImageInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRawPromptInvocation"] | components["schemas"]["SDXLRefinerRawPromptInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["TextToLatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["InpaintInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["ParamIntInvocation"] | components["schemas"]["ParamFloatInvocation"] | components["schemas"]["ParamStringInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SDXLTextToLatentsInvocation"] | components["schemas"]["SDXLLatentsToLatentsInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["LatentsToLatentsInvocation"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Invalid node or link */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Node 
   * @description Deletes a node in the graph and removes all linked edges
   */
  delete_node: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string;
        /** @description The path to the node to delete */
        node_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Invalid node or link */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add Edge 
   * @description Adds an edge to the graph
   */
  add_edge: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Edge"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Invalid node or link */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Edge 
   * @description Deletes an edge from the graph
   */
  delete_edge: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string;
        /** @description The id of the node the edge is coming from */
        from_node_id: string;
        /** @description The field of the node the edge is coming from */
        from_field: string;
        /** @description The id of the node the edge is going to */
        to_node_id: string;
        /** @description The field of the node the edge is going to */
        to_field: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"];
        };
      };
      /** @description Invalid node or link */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Invoke Session 
   * @description Invokes a session
   */
  invoke_session: {
    parameters: {
      query?: {
        /** @description Whether or not to invoke all remaining invocations */
        all?: boolean;
      };
      path: {
        /** @description The id of the session to invoke */
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description The invocation is queued */
      202: never;
      /** @description The session has no invocations ready to invoke */
      400: never;
      /** @description Session not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Cancel Session Invoke 
   * @description Invokes a session
   */
  cancel_session_invoke: {
    parameters: {
      path: {
        /** @description The id of the session to cancel */
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description The invocation is canceled */
      202: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Models 
   * @description Gets a list of models
   */
  list_models: {
    parameters: {
      query?: {
        /** @description Base models to include */
        base_models?: (components["schemas"]["BaseModelType"])[];
        /** @description The type of model to get */
        model_type?: components["schemas"]["ModelType"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ModelsList"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Model 
   * @description Delete Model
   */
  del_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    responses: {
      /** @description Model deleted successfully */
      204: never;
      /** @description Model not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Model 
   * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
   */
  update_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
      };
    };
    responses: {
      /** @description The model was updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Bad request */
      400: never;
      /** @description The model could not be found */
      404: never;
      /** @description There is already a model corresponding to the new name */
      409: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Import Model 
   * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
   */
  import_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_import_model"];
      };
    };
    responses: {
      /** @description The model imported successfully */
      201: {
        content: {
          "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description The model could not be found */
      404: never;
      /** @description There is already a model corresponding to this path or repo_id */
      409: never;
      /** @description Unrecognized file/folder format */
      415: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description The model appeared to import successfully, but could not be found in the model manager */
      424: never;
    };
  };
  /**
   * Add Model 
   * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
   */
  add_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
      };
    };
    responses: {
      /** @description The model added successfully */
      201: {
        content: {
          "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description The model could not be found */
      404: never;
      /** @description There is already a model corresponding to this path or repo_id */
      409: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description The model appeared to add successfully, but could not be found in the model manager */
      424: never;
    };
  };
  /**
   * Convert Model 
   * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
   */
  convert_model: {
    parameters: {
      query?: {
        /** @description Save the converted model to the designated directory */
        convert_dest_directory?: string;
      };
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"];
        /** @description model name */
        model_name: string;
      };
    };
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Bad request */
      400: never;
      /** @description Model not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Search For Models */
  search_for_models: {
    parameters: {
      query: {
        /** @description Directory path to search for models */
        search_path: string;
      };
    };
    responses: {
      /** @description Directory searched successfully */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Invalid directory path */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Ckpt Configs 
   * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
   */
  list_ckpt_configs: {
    responses: {
      /** @description paths retrieved successfully */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  /**
   * Sync To Config 
   * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
   * in-memory data structures with disk data structures.
   */
  sync_to_config: {
    responses: {
      /** @description synchronization successful */
      201: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Merge Models 
   * @description Convert a checkpoint model into a diffusers model
   */
  merge_models: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_merge_models"];
      };
    };
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["VaeModelConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ControlNetModelConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"];
        };
      };
      /** @description Incompatible models */
      400: never;
      /** @description One or more models not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Image Dtos 
   * @description Gets a list of image DTOs
   */
  list_image_dtos: {
    parameters: {
      query?: {
        /** @description The origin of images to list */
        image_origin?: components["schemas"]["ResourceOrigin"];
        /** @description The categories of image to include */
        categories?: (components["schemas"]["ImageCategory"])[];
        /** @description Whether to list intermediate images */
        is_intermediate?: boolean;
        /** @description The board id to filter by */
        board_id?: string;
        /** @description The page offset */
        offset?: number;
        /** @description The number of images per page */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_ImageDTO_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Upload Image 
   * @description Uploads an image
   */
  upload_image: {
    parameters: {
      query: {
        /** @description The category of the image */
        image_category: components["schemas"]["ImageCategory"];
        /** @description Whether this is an intermediate image */
        is_intermediate: boolean;
        /** @description The session ID associated with this upload, if any */
        session_id?: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image"];
      };
    };
    responses: {
      /** @description The image was uploaded successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Image upload failed */
      415: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Dto 
   * @description Gets an image's DTO
   */
  get_image_dto: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Image 
   * @description Deletes an image
   */
  delete_image: {
    parameters: {
      path: {
        /** @description The name of the image to delete */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Image 
   * @description Updates an image
   */
  update_image: {
    parameters: {
      path: {
        /** @description The name of the image to update */
        image_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageRecordChanges"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Metadata 
   * @description Gets an image's metadata
   */
  get_image_metadata: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageMetadata"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Full 
   * @description Gets a full-resolution image file
   */
  get_image_full: {
    parameters: {
      path: {
        /** @description The name of full-resolution image file to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Return the full-resolution image */
      200: {
        content: {
          "image/png": unknown;
        };
      };
      /** @description Image not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Thumbnail 
   * @description Gets a thumbnail image file
   */
  get_image_thumbnail: {
    parameters: {
      path: {
        /** @description The name of thumbnail image file to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Return the image thumbnail */
      200: {
        content: {
          "image/webp": unknown;
        };
      };
      /** @description Image not found */
      404: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Image Urls 
   * @description Gets an image and thumbnail URL
   */
  get_image_urls: {
    parameters: {
      path: {
        /** @description The name of the image whose URL to get */
        image_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageUrlsDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Boards 
   * @description Gets a list of boards
   */
  list_boards: {
    parameters: {
      query?: {
        /** @description Whether to list all boards */
        all?: boolean;
        /** @description The page offset */
        offset?: number;
        /** @description The number of boards per page */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_BoardDTO_"] | (components["schemas"]["BoardDTO"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Board 
   * @description Creates a board
   */
  create_board: {
    parameters: {
      query: {
        /** @description The name of the board to create */
        board_name: string;
      };
    };
    responses: {
      /** @description The board was created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Board 
   * @description Gets a board
   */
  get_board: {
    parameters: {
      path: {
        /** @description The id of board to get */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Board 
   * @description Deletes a board
   */
  delete_board: {
    parameters: {
      query?: {
        /** @description Permanently delete all images on the board */
        include_images?: boolean;
      };
      path: {
        /** @description The id of board to delete */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Board 
   * @description Updates a board
   */
  update_board: {
    parameters: {
      path: {
        /** @description The id of board to update */
        board_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BoardChanges"];
      };
    };
    responses: {
      /** @description The board was updated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Board Image 
   * @description Creates a board_image
   */
  create_board_image: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_create_board_image"];
      };
    };
    responses: {
      /** @description The image was added to a board successfully */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove Board Image 
   * @description Deletes a board_image
   */
  remove_board_image: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_remove_board_image"];
      };
    };
    responses: {
      /** @description The image was removed from the board successfully */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Board Images 
   * @description Gets a list of images for a board
   */
  list_board_images: {
    parameters: {
      query?: {
        /** @description The page offset */
        offset?: number;
        /** @description The number of boards per page */
        limit?: number;
      };
      path: {
        /** @description The id of the board */
        board_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_ImageDTO_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Version */
  app_version: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppVersion"];
        };
      };
    };
  };
  /** Get Config */
  get_config: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppConfig"];
        };
      };
    };
  };
};
